{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nFinScoreX is a comprehensive peer-to-peer (P2P) lending platform that connects borrowers with investors through an intelligent marketplace. The application features algorithmic credit scoring, automated risk assessment, and real-time investment opportunities. Built as a full-stack web application, it provides distinct user experiences for borrowers, investors, and administrators while maintaining a unified marketplace for loan transactions.\n\n**IMPORTANT**: This project has been successfully converted from Replit-dependent to a standalone GitHub-ready application. All Replit authentication and dependencies have been removed and replaced with JWT-based authentication system.\n\n**DEPLOYMENT READY**: Project is now optimized for Vercel + Supabase deployment with complete documentation and configuration files.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nPrimary language: English (for international recruiters)\nSecondary language: French (optional addition)\nPriority: Stable, working application over advanced features\n\n# System Architecture\n\n## Frontend Architecture\nThe client-side is built with **React** and **TypeScript**, utilizing a component-based architecture with modern tooling:\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives for accessibility and consistency\n- **Styling**: Tailwind CSS with custom design tokens and neutral color palette\n- **State Management**: TanStack Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation schemas\n- **Build Tool**: Vite for fast development and optimized production builds\n\n## Backend Architecture\nThe server-side follows a **Node.js/Express** pattern with TypeScript:\n- **Framework**: Express.js with middleware for logging, error handling, and request processing\n- **API Design**: RESTful endpoints organized by feature (loans, investments, payments, admin)\n- **Authentication**: JWT-based authentication with bcryptjs password hashing\n- **Database Layer**: Drizzle ORM with type-safe queries and migrations\n- **Error Handling**: Centralized error middleware with proper HTTP status codes\n\n## Database Design\n**PostgreSQL** database with Drizzle ORM providing:\n- **User Management**: User profiles with role-based access (borrower, investor, admin)\n- **Loan Lifecycle**: Complete loan management from application to completion\n- **Investment Tracking**: Investment records with loan relationships\n- **Payment Processing**: Payment history and transaction records\n- **Session Storage**: Secure session management for authentication\n\n## Authentication & Authorization\n**JWT-based Authentication** providing:\n- **JWT Tokens**: Secure token-based authentication\n- **Session Management**: Express session with in-memory storage (configurable)\n- **Role-Based Access**: User type enforcement (borrower, investor, admin)\n- **Password Security**: bcryptjs hashing for secure password storage\n- **Security Features**: Token validation, secure cookies, and proper logout handling\n\n## Credit Scoring Algorithm\n**Custom algorithmic scoring** system featuring:\n- **Multi-Factor Analysis**: Income, debt-to-income ratio, employment history, credit history\n- **Weighted Scoring**: Industry-standard weightings for different credit factors\n- **Risk Assessment**: Automatic interest rate calculation based on credit score\n- **Payment Calculations**: Monthly payment and amortization schedule generation\n\n## Financial Calculations\n**Comprehensive financial utilities** including:\n- **Loan Calculations**: Monthly payments, total interest, amortization schedules\n- **Risk Metrics**: Portfolio diversification, return calculations, default rate analysis\n- **Currency Formatting**: Localized currency display and formatting\n\n# External Dependencies\n\n## Core Infrastructure\n- **PostgreSQL Database**: Relational database for data persistence\n- **JWT Authentication**: Token-based authentication system\n- **Node.js/Express**: Backend runtime and web framework\n\n## Frontend Libraries\n- **Radix UI**: Headless UI components for accessibility and interaction patterns\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **TanStack Query**: Data fetching and caching library for React\n- **React Hook Form**: Form state management and validation\n- **Zod**: TypeScript-first schema validation\n- **Lucide React**: Icon library for consistent iconography\n\n## Backend Libraries\n- **Drizzle ORM**: Type-safe database ORM with migration support\n- **Express Session**: Session middleware for user sessions\n- **JWT (jsonwebtoken)**: Token-based authentication\n- **bcryptjs**: Password hashing and validation\n- **Date-fns**: Date manipulation and formatting utilities\n\n## Development Tools\n- **TypeScript**: Type safety across the entire application\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **Vite**: Development server with hot module replacement\n- **PostCSS**: CSS processing with Tailwind integration","size_bytes":5041},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"#1E40AF\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"#059669\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"#DC2626\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        neutral: {\n          50: \"#F8FAFC\",\n          100: \"#F1F5F9\",\n          200: \"#E2E8F0\",\n          300: \"#CBD5E1\",\n          400: \"#94A3B8\",\n          500: \"#64748B\",\n          600: \"#475569\",\n          700: \"#334155\",\n          800: \"#1F2937\",\n          900: \"#111827\",\n        },\n        danger: \"#DC2626\",\n      },\n      fontFamily: {\n        inter: [\"Inter\", \"sans-serif\"],\n        sans: [\"Inter\", \"sans-serif\"],\n        serif: [\"Georgia\", \"serif\"],\n        mono: [\"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2769},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});","size_bytes":634},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Please add your Supabase database URL to environment variables.\",\n  );\n}\n\n// For Supabase connection\nconst connectionString = process.env.DATABASE_URL;\nconst client = postgres(connectionString, { prepare: false });\n\nexport const db = drizzle(client, { schema });\nexport { client };","size_bytes":491},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes-simple\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2073},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { setupAuth, isAuthenticated } from \"./auth\";\nimport { storage } from \"./storage\";\nimport { insertLoanSchema, insertInvestmentSchema } from \"@shared/schema\";\n\n// Credit scoring algorithm\nfunction calculateCreditScore(params: {\n  annualIncome: number;\n  currentDebt: number;\n  employmentYears: number;\n  creditHistory: number;\n  previousLoans: number;\n  homeOwnership: string;\n  bankAccount: boolean;\n}) {\n  const {\n    annualIncome,\n    currentDebt,\n    employmentYears,\n    creditHistory,\n    previousLoans,\n    homeOwnership,\n    bankAccount,\n  } = params;\n\n  let score = 300; // Base score\n\n  // Income factor (35% weight)\n  const debtToIncomeRatio = currentDebt / annualIncome;\n  if (debtToIncomeRatio < 0.1) score += 200;\n  else if (debtToIncomeRatio < 0.3) score += 150;\n  else if (debtToIncomeRatio < 0.5) score += 100;\n  else score += 50;\n\n  // Credit history (25% weight)\n  score += Math.min(creditHistory * 15, 150);\n\n  // Employment stability (20% weight)\n  score += Math.min(employmentYears * 10, 100);\n\n  // Home ownership (10% weight)\n  if (homeOwnership === \"own\") score += 50;\n  else if (homeOwnership === \"mortgage\") score += 30;\n\n  // Bank account (5% weight)\n  if (bankAccount) score += 25;\n\n  // Previous loans penalty (5% weight)\n  score -= previousLoans * 10;\n\n  return Math.min(Math.max(score, 300), 850);\n}\n\nfunction calculateInterestRate(creditScore: number): number {\n  if (creditScore >= 750) return 3.5;\n  if (creditScore >= 650) return 6.5;\n  if (creditScore >= 550) return 12.5;\n  if (creditScore >= 450) return 18.5;\n  return 24.9;\n}\n\nfunction calculateMonthlyPayment(principal: number, annualRate: number, termInMonths: number): number {\n  const monthlyRate = annualRate / 100 / 12;\n  const payment = principal * (monthlyRate * Math.pow(1 + monthlyRate, termInMonths)) /\n    (Math.pow(1 + monthlyRate, termInMonths) - 1);\n  return payment;\n}\n\n// Test route for bypassing Replit auth\nfunction addTestRoutes(app: Express) {\n  app.get(\"/api/test-auth\", (req, res) => {\n    res.json({ \n      message: \"FinScoreX P2P Platform - Demo Mode\",\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || \"development\",\n      mode: \"no-auth-demo\"\n    });\n  });\n\n  app.post(\"/api/test-register\", async (req, res) => {\n    try {\n      const { email, password, firstName, lastName } = req.body;\n      \n      if (!email || !password || !firstName || !lastName) {\n        return res.status(400).json({ message: \"Tous les champs sont requis\" });\n      }\n\n      // Check if user exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Un utilisateur existe déjà avec cet email\" });\n      }\n\n      const user = await storage.createUser({\n        email,\n        password,\n        firstName,\n        lastName,\n        userType: \"borrower\",\n      });\n\n      const { password: _, ...userResponse } = user;\n      res.status(201).json({ \n        success: true,\n        user: userResponse,\n        message: \"Compte créé avec succès\"\n      });\n    } catch (error) {\n      console.error(\"Test registration error:\", error);\n      res.status(500).json({ message: \"Erreur interne du serveur\" });\n    }\n  });\n}\n\nexport function registerRoutes(app: Express): Server {\n  // Auth middleware\n  setupAuth(app);\n\n  // Test routes for demonstration\n  addTestRoutes(app);\n\n  // Loan routes\n  app.post(\"/api/loans\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const loanData = insertLoanSchema.parse({\n        ...req.body,\n        borrowerId: userId,\n      });\n\n      // Calculate credit score and interest rate\n      const creditScore = calculateCreditScore({\n        annualIncome: parseFloat(loanData.annualIncome || \"0\"),\n        currentDebt: parseFloat(loanData.currentDebt || \"0\"),\n        employmentYears: loanData.employmentYears || 0,\n        creditHistory: loanData.creditHistory || 0,\n        previousLoans: loanData.previousLoans || 0,\n        homeOwnership: loanData.homeOwnership || \"rent\",\n        bankAccount: loanData.bankAccount || true,\n      });\n\n      const interestRate = calculateInterestRate(creditScore);\n      const monthlyPayment = calculateMonthlyPayment(\n        parseFloat(loanData.amount),\n        interestRate,\n        loanData.duration || 12\n      );\n\n      // Determine credit grade\n      let creditGrade: \"A\" | \"B\" | \"C\" | \"D\" | \"E\" = \"E\";\n      if (creditScore >= 750) creditGrade = \"A\";\n      else if (creditScore >= 650) creditGrade = \"B\";\n      else if (creditScore >= 550) creditGrade = \"C\";\n      else if (creditScore >= 450) creditGrade = \"D\";\n\n      const loan = await storage.createLoan({\n        ...loanData,\n        creditScore,\n        creditGrade,\n        interestRate: interestRate.toFixed(2),\n        monthlyPayment: monthlyPayment.toFixed(2),\n        status: \"submitted\",\n      });\n\n      res.json(loan);\n    } catch (error) {\n      console.error(\"Error creating loan:\", error);\n      res.status(500).json({ message: \"Failed to create loan\" });\n    }\n  });\n\n  app.get(\"/api/loans/my\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const loans = await storage.getUserLoans(userId);\n      res.json(loans);\n    } catch (error) {\n      console.error(\"Error fetching user loans:\", error);\n      res.status(500).json({ message: \"Failed to fetch loans\" });\n    }\n  });\n\n  app.get(\"/api/loans/marketplace\", isAuthenticated, async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n      const loans = await storage.getAvailableLoans(limit);\n      res.json(loans);\n    } catch (error) {\n      console.error(\"Error fetching marketplace loans:\", error);\n      res.status(500).json({ message: \"Failed to fetch marketplace loans\" });\n    }\n  });\n\n  app.get(\"/api/loans/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const loan = await storage.getLoan(req.params.id);\n      if (!loan) {\n        return res.status(404).json({ message: \"Loan not found\" });\n      }\n      res.json(loan);\n    } catch (error) {\n      console.error(\"Error fetching loan:\", error);\n      res.status(500).json({ message: \"Failed to fetch loan\" });\n    }\n  });\n\n  app.patch(\"/api/loans/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const loan = await storage.updateLoan(req.params.id, req.body);\n      res.json(loan);\n    } catch (error) {\n      console.error(\"Error updating loan:\", error);\n      res.status(500).json({ message: \"Failed to update loan\" });\n    }\n  });\n\n  app.delete(\"/api/loans/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const loanId = req.params.id;\n      \n      // Check if the loan belongs to the user\n      const loan = await storage.getLoan(loanId);\n      if (!loan) {\n        return res.status(404).json({ message: \"Loan not found\" });\n      }\n      \n      if (loan.borrowerId !== userId) {\n        return res.status(403).json({ message: \"You can only delete your own loans\" });\n      }\n      \n      // Check if loan has investments - only allow deletion if no investments\n      if (loan.investments && loan.investments.length > 0) {\n        return res.status(400).json({ message: \"Cannot delete loan with existing investments\" });\n      }\n      \n      await storage.deleteLoan(loanId);\n      res.json({ message: \"Loan deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting loan:\", error);\n      res.status(500).json({ message: \"Failed to delete loan\" });\n    }\n  });\n\n  // Investment routes\n  app.post(\"/api/investments\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const investmentData = insertInvestmentSchema.parse({\n        ...req.body,\n        investorId: userId,\n      });\n\n      // Get loan details to calculate expected return\n      const loan = await storage.getLoan(investmentData.loanId);\n      if (!loan) {\n        return res.status(404).json({ message: \"Loan not found\" });\n      }\n\n      // Check if loan is available for investment\n      if (loan.status !== \"approved\") {\n        return res.status(400).json({ message: \"Loan is not available for investment\" });\n      }\n\n      // Check funding limit\n      const requestedAmount = parseFloat(investmentData.amount);\n      const remainingAmount = parseFloat(loan.amount) - parseFloat(loan.totalFunded);\n      \n      if (requestedAmount > remainingAmount) {\n        return res.status(400).json({ \n          message: \"Investment amount exceeds remaining funding needed\",\n          remainingAmount: remainingAmount.toString()\n        });\n      }\n\n      const interestRate = parseFloat(loan.interestRate || \"0\");\n      const expectedReturn = (requestedAmount * (interestRate / 100) * (loan.duration || 12)) / 12;\n\n      const investment = await storage.createInvestment({\n        ...investmentData,\n        interestRate: loan.interestRate || \"0\",\n        expectedReturn: expectedReturn.toFixed(2),\n      });\n\n      res.json(investment);\n    } catch (error) {\n      console.error(\"Error creating investment:\", error);\n      res.status(500).json({ message: \"Failed to create investment\" });\n    }\n  });\n\n  app.get(\"/api/investments/my\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const investments = await storage.getUserInvestments(userId);\n      res.json(investments);\n    } catch (error) {\n      console.error(\"Error fetching user investments:\", error);\n      res.status(500).json({ message: \"Failed to fetch investments\" });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/metrics\", isAuthenticated, async (req, res) => {\n    try {\n      const user = req.user!;\n      if (user?.userType !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      // Get basic platform metrics\n      const allLoans = await storage.getAllLoans();\n      const allInvestments = await storage.getAllInvestments();\n      const allUsers = await storage.getAllUsers();\n      \n      const metrics = {\n        totalLoans: allLoans.length,\n        totalInvestments: allInvestments.length,\n        totalUsers: allUsers.length,\n        totalLoanAmount: allLoans.reduce((sum, loan) => sum + parseFloat(loan.amount), 0),\n        totalInvestmentAmount: allInvestments.reduce((sum, inv) => sum + parseFloat(inv.amount), 0),\n        averageCreditScore: allLoans.length > 0 \n          ? allLoans.reduce((sum, loan) => sum + (loan.creditScore || 0), 0) / allLoans.length \n          : 0\n      };\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error fetching metrics:\", error);\n      res.status(500).json({ message: \"Failed to fetch metrics\" });\n    }\n  });\n\n  app.get(\"/api/admin/loans\", isAuthenticated, async (req, res) => {\n    try {\n      const user = req.user!;\n      if (user?.userType !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const loans = await storage.getAllLoans();\n      res.json(loans);\n    } catch (error) {\n      console.error(\"Error fetching admin loans:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin loans\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":11392},"server/storage.ts":{"content":"import {\n  users,\n  loans,\n  investments, \n  payments,\n  type User,\n  type UpsertUser,\n  type CreateUser,\n  type Loan,\n  type InsertLoan,\n  type Investment,\n  type InsertInvestment,\n  type Payment,\n  type InsertPayment,\n  type LoanWithDetails,\n  type InvestmentWithDetails,\n  type UserWithStats,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, asc, and, sum, count, avg, sql } from \"drizzle-orm\";\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  createUser(user: CreateUser): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getUserStats(userId: string): Promise<UserWithStats | undefined>;\n  // Loan operations\n  createLoan(loan: InsertLoan): Promise<Loan>;\n  updateLoan(id: string, updates: Partial<Loan>): Promise<Loan>;\n  deleteLoan(id: string): Promise<void>;\n  getLoan(id: string): Promise<LoanWithDetails | undefined>;\n  getUserLoans(borrowerId: string): Promise<LoanWithDetails[]>;\n  getAvailableLoans(limit?: number): Promise<LoanWithDetails[]>;\n  getAllLoans(): Promise<LoanWithDetails[]>;\n  // Investment operations\n  createInvestment(investment: InsertInvestment): Promise<Investment>;\n  getUserInvestments(investorId: string): Promise<InvestmentWithDetails[]>;\n  getLoanInvestments(loanId: string): Promise<Investment[]>;\n  // Payment operations\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  getLoanPayments(loanId: string): Promise<Payment[]>;\n  updatePayment(id: string, updates: Partial<Payment>): Promise<Payment>;\n  // Analytics\n  getPlatformMetrics(): Promise<{\n    totalLoans: number;\n    totalVolume: string;\n    defaultRate: string;\n    avgReturn: string;\n  }>;\n  // Admin methods\n  getAllUsers(): Promise<User[]>;\n  getAllInvestments(): Promise<Investment[]>;\n  getAdminMetrics(): Promise<{\n    totalLoans: number;\n    totalUsers: number;\n    totalLoanAmount: number;\n    totalInvestmentAmount: number;\n    averageCreditScore: number;\n  }>;\n}\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n  async createUser(userData: CreateUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .returning();\n    return user;\n  }\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n  async getUserStats(userId: string): Promise<UserWithStats | undefined> {\n    const user = await this.getUser(userId);\n    if (!user) return undefined;\n    // Get investment stats\n    const investmentStats = await db\n      .select({\n        totalInvested: sum(investments.amount),\n        activeInvestments: count(investments.id),\n        totalReturn: sum(investments.actualReturn),\n      })\n      .from(investments)\n      .where(eq(investments.investorId, userId));\n    // Get loan stats  \n    const loanStats = await db\n      .select({\n        totalBorrowed: sum(loans.amount),\n        activeLoans: count(loans.id),\n      })\n      .from(loans)\n      .where(eq(loans.borrowerId, userId));\n    const investmentStat = investmentStats[0];\n    const loanStat = loanStats[0];\n    return {\n      ...user,\n      totalInvested: investmentStat.totalInvested || \"0\",\n      activeInvestments: investmentStat.activeInvestments || 0,\n      totalReturn: investmentStat.totalReturn || \"0\",\n      avgReturn: investmentStat.totalInvested && parseFloat(investmentStat.totalInvested) > 0\n        ? ((parseFloat(investmentStat.totalReturn || \"0\") / parseFloat(investmentStat.totalInvested)) * 100).toFixed(1)\n        : \"0\",\n      totalBorrowed: loanStat.totalBorrowed || \"0\",\n      activeLoans: loanStat.activeLoans || 0,\n    };\n  }\n  // Loan operations\n  async createLoan(loanData: InsertLoan): Promise<Loan> {\n    const [loan] = await db.insert(loans).values(loanData).returning();\n    return loan;\n  }\n  async updateLoan(id: string, updates: Partial<Loan>): Promise<Loan> {\n    const [loan] = await db\n      .update(loans)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(loans.id, id))\n      .returning();\n    return loan;\n  }\n  async deleteLoan(id: string): Promise<void> {\n    // First delete all related investments\n    await db.delete(investments).where(eq(investments.loanId, id));\n    // Then delete all related payments\n    await db.delete(payments).where(eq(payments.loanId, id));\n    // Finally delete the loan\n    await db.delete(loans).where(eq(loans.id, id));\n  }\n  async getLoan(id: string): Promise<LoanWithDetails | undefined> {\n    const result = await db\n      .select({\n        loan: loans,\n        borrower: {\n          firstName: users.firstName,\n          lastName: users.lastName,\n        },\n      })\n      .from(loans)\n      .innerJoin(users, eq(loans.borrowerId, users.id))\n      .where(eq(loans.id, id));\n    if (!result.length) return undefined;\n    const { loan, borrower } = result[0];\n    const loanInvestments = await this.getLoanInvestments(id);\n    const totalFunded = loanInvestments\n      .reduce((sum, inv) => sum + parseFloat(inv.amount), 0)\n      .toString();\n    const fundingPercentage = (parseFloat(totalFunded) / parseFloat(loan.amount)) * 100;\n    return {\n      ...loan,\n      borrower,\n      investments: loanInvestments,\n      totalFunded,\n      fundingPercentage,\n    };\n  }\n  async getUserLoans(borrowerId: string): Promise<LoanWithDetails[]> {\n    const result = await db\n      .select({\n        loan: loans,\n        borrower: {\n          firstName: users.firstName,\n          lastName: users.lastName,\n        },\n      })\n      .from(loans)\n      .innerJoin(users, eq(loans.borrowerId, users.id))\n      .where(eq(loans.borrowerId, borrowerId))\n      .orderBy(desc(loans.createdAt));\n    const loansWithDetails = await Promise.all(\n      result.map(async ({ loan, borrower }) => {\n        const loanInvestments = await this.getLoanInvestments(loan.id);\n        const totalFunded = loanInvestments\n          .reduce((sum, inv) => sum + parseFloat(inv.amount), 0)\n          .toString();\n        const fundingPercentage = (parseFloat(totalFunded) / parseFloat(loan.amount)) * 100;\n        return {\n          ...loan,\n          borrower,\n          investments: loanInvestments,\n          totalFunded,\n          fundingPercentage,\n        };\n      })\n    );\n    return loansWithDetails;\n  }\n  async getAvailableLoans(limit = 20): Promise<LoanWithDetails[]> {\n    const result = await db\n      .select({\n        loan: loans,\n        borrower: {\n          firstName: users.firstName,\n          lastName: users.lastName,\n        },\n      })\n      .from(loans)\n      .innerJoin(users, eq(loans.borrowerId, users.id))\n      .where(and(eq(loans.status, \"approved\")))\n      .orderBy(desc(loans.createdAt))\n      .limit(limit);\n    const loansWithDetails = await Promise.all(\n      result.map(async ({ loan, borrower }) => {\n        const loanInvestments = await this.getLoanInvestments(loan.id);\n        const totalFunded = loanInvestments\n          .reduce((sum, inv) => sum + parseFloat(inv.amount), 0)\n          .toString();\n        const fundingPercentage = (parseFloat(totalFunded) / parseFloat(loan.amount)) * 100;\n        return {\n          ...loan,\n          borrower,\n          investments: loanInvestments,\n          totalFunded,\n          fundingPercentage,\n        };\n      })\n    );\n    return loansWithDetails.filter(loan => loan.fundingPercentage < 100);\n  }\n  async getAllLoans(): Promise<LoanWithDetails[]> {\n    const result = await db\n      .select({\n        loan: loans,\n        borrower: {\n          firstName: users.firstName,\n          lastName: users.lastName,\n        },\n      })\n      .from(loans)\n      .innerJoin(users, eq(loans.borrowerId, users.id))\n      .orderBy(desc(loans.createdAt));\n    const loansWithDetails = await Promise.all(\n      result.map(async ({ loan, borrower }) => {\n        const loanInvestments = await this.getLoanInvestments(loan.id);\n        const totalFunded = loanInvestments\n          .reduce((sum, inv) => sum + parseFloat(inv.amount), 0)\n          .toString();\n        const fundingPercentage = (parseFloat(totalFunded) / parseFloat(loan.amount)) * 100;\n        return {\n          ...loan,\n          borrower,\n          investments: loanInvestments,\n          totalFunded,\n          fundingPercentage,\n        };\n      })\n    );\n    return loansWithDetails;\n  }\n  // Investment operations\n  async createInvestment(investmentData: InsertInvestment): Promise<Investment> {\n    const [investment] = await db.insert(investments).values(investmentData).returning();\n    return investment;\n  }\n  async getUserInvestments(investorId: string): Promise<InvestmentWithDetails[]> {\n    const result = await db\n      .select({\n        investment: investments,\n        loan: {\n          amount: loans.amount,\n          purpose: loans.purpose,\n          duration: loans.duration,\n          creditGrade: loans.creditGrade,\n          status: loans.status,\n        },\n        borrower: {\n          firstName: users.firstName,\n          lastName: users.lastName,\n        },\n      })\n      .from(investments)\n      .innerJoin(loans, eq(investments.loanId, loans.id))\n      .innerJoin(users, eq(loans.borrowerId, users.id))\n      .where(eq(investments.investorId, investorId))\n      .orderBy(desc(investments.createdAt));\n    return result.map(({ investment, loan, borrower }) => ({\n      ...investment,\n      loan,\n      borrower,\n    }));\n  }\n  async getLoanInvestments(loanId: string): Promise<Investment[]> {\n    return await db\n      .select()\n      .from(investments)\n      .where(eq(investments.loanId, loanId))\n      .orderBy(desc(investments.createdAt));\n  }\n  // Payment operations\n  async createPayment(paymentData: InsertPayment): Promise<Payment> {\n    const [payment] = await db.insert(payments).values(paymentData).returning();\n    return payment;\n  }\n  async getLoanPayments(loanId: string): Promise<Payment[]> {\n    return await db\n      .select()\n      .from(payments)\n      .where(eq(payments.loanId, loanId))\n      .orderBy(asc(payments.paymentNumber));\n  }\n  async updatePayment(id: string, updates: Partial<Payment>): Promise<Payment> {\n    const [payment] = await db\n      .update(payments)\n      .set(updates)\n      .where(eq(payments.id, id))\n      .returning();\n    return payment;\n  }\n  // Analytics\n  async getPlatformMetrics(): Promise<{\n    totalLoans: number;\n    totalVolume: string;\n    defaultRate: string;\n    avgReturn: string;\n  }> {\n    const [loanMetrics] = await db\n      .select({\n        totalLoans: count(loans.id),\n        totalVolume: sum(loans.amount),\n        defaultedLoans: count(sql`case when ${loans.status} = 'defaulted' then 1 end`),\n      })\n      .from(loans);\n    const [investmentMetrics] = await db\n      .select({\n        avgReturn: avg(sql`(${investments.actualReturn} / ${investments.amount}) * 100`),\n      })\n      .from(investments)\n      .where(sql`${investments.actualReturn} > 0`);\n    const defaultRate = loanMetrics.defaultedLoans && loanMetrics.totalLoans\n      ? ((loanMetrics.defaultedLoans / loanMetrics.totalLoans) * 100).toFixed(1)\n      : \"0.0\";\n    return {\n      totalLoans: loanMetrics.totalLoans || 0,\n      totalVolume: loanMetrics.totalVolume || \"0\",\n      defaultRate,\n      avgReturn: investmentMetrics.avgReturn \n        ? parseFloat(investmentMetrics.avgReturn).toFixed(1)\n        : \"0.0\",\n    };\n  }\n  // Admin methods\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n  async getAllInvestments(): Promise<Investment[]> {\n    return await db.select().from(investments);\n  }\n  async getAdminMetrics() {\n    const allLoans = await this.getAllLoans();\n    const allInvestments = await this.getAllInvestments();\n    const allUsers = await this.getAllUsers();\n    const totalLoanAmount = allLoans.reduce((sum: number, loan: LoanWithDetails) => sum + parseFloat(loan.amount), 0);\n    const totalInvestmentAmount = allInvestments.reduce((sum: number, inv: Investment) => sum + parseFloat(inv.amount), 0);\n    return {\n      totalLoans: allLoans.length,\n      totalUsers: allUsers.length,\n      totalLoanAmount,\n      totalInvestmentAmount,\n      averageCreditScore: 650\n    };\n  }\n}\nexport const storage = new DatabaseStorage();\n","size_bytes":12508},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  decimal,\n  integer,\n  text,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (can be removed if using JWT only)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (demo version - no email/password required)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  userType: varchar(\"user_type\", { enum: [\"borrower\", \"investor\", \"admin\"] }).default(\"borrower\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Loan status enum\nexport const loanStatusEnum = pgEnum(\"loan_status\", [\n  \"draft\",\n  \"submitted\", \n  \"under_review\",\n  \"approved\",\n  \"funded\",\n  \"active\",\n  \"completed\",\n  \"defaulted\"\n]);\n\n// Credit grade enum\nexport const creditGradeEnum = pgEnum(\"credit_grade\", [\"A\", \"B\", \"C\", \"D\", \"E\"]);\n\n// Loans table\nexport const loans = pgTable(\"loans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  borrowerId: varchar(\"borrower_id\").references(() => users.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  purpose: text(\"purpose\").notNull(),\n  duration: integer(\"duration\").notNull(), // in months\n  interestRate: decimal(\"interest_rate\", { precision: 5, scale: 2 }),\n  monthlyPayment: decimal(\"monthly_payment\", { precision: 10, scale: 2 }),\n  creditScore: integer(\"credit_score\"),\n  creditGrade: creditGradeEnum(\"credit_grade\"),\n  status: loanStatusEnum(\"status\").default(\"draft\"),\n  \n  // Financial information\n  annualIncome: decimal(\"annual_income\", { precision: 12, scale: 2 }),\n  employmentYears: integer(\"employment_years\"),\n  currentDebt: decimal(\"current_debt\", { precision: 12, scale: 2 }),\n  homeOwnership: varchar(\"home_ownership\", { enum: [\"rent\", \"own\", \"mortgage\"] }),\n  bankAccount: boolean(\"bank_account\").default(true),\n  creditHistory: integer(\"credit_history\"), // years of credit history\n  previousLoans: integer(\"previous_loans\").default(0),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  fundedAt: timestamp(\"funded_at\"),\n});\n\n// Investment status enum  \nexport const investmentStatusEnum = pgEnum(\"investment_status\", [\n  \"pending\",\n  \"confirmed\", \n  \"active\",\n  \"completed\",\n  \"cancelled\"\n]);\n\n// Investments table\nexport const investments = pgTable(\"investments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  investorId: varchar(\"investor_id\").references(() => users.id).notNull(),\n  loanId: varchar(\"loan_id\").references(() => loans.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  interestRate: decimal(\"interest_rate\", { precision: 5, scale: 2 }).notNull(),\n  expectedReturn: decimal(\"expected_return\", { precision: 10, scale: 2 }),\n  actualReturn: decimal(\"actual_return\", { precision: 10, scale: 2 }).default(\"0\"),\n  status: investmentStatusEnum(\"status\").default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Payment status enum\nexport const paymentStatusEnum = pgEnum(\"payment_status\", [\n  \"scheduled\",\n  \"pending\",\n  \"completed\", \n  \"late\",\n  \"missed\"\n]);\n\n// Payments table for tracking loan repayments\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  loanId: varchar(\"loan_id\").references(() => loans.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  principalAmount: decimal(\"principal_amount\", { precision: 10, scale: 2 }).notNull(),\n  interestAmount: decimal(\"interest_amount\", { precision: 10, scale: 2 }).notNull(),\n  dueDate: timestamp(\"due_date\").notNull(),\n  paidDate: timestamp(\"paid_date\"),\n  status: paymentStatusEnum(\"status\").default(\"scheduled\"),\n  paymentNumber: integer(\"payment_number\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  loansAsBorrower: many(loans, { relationName: \"borrower\" }),\n  investments: many(investments, { relationName: \"investor\" }),\n}));\n\nexport const loansRelations = relations(loans, ({ one, many }) => ({\n  borrower: one(users, {\n    fields: [loans.borrowerId],\n    references: [users.id],\n    relationName: \"borrower\"\n  }),\n  investments: many(investments),\n  payments: many(payments),\n}));\n\nexport const investmentsRelations = relations(investments, ({ one }) => ({\n  investor: one(users, {\n    fields: [investments.investorId],\n    references: [users.id],\n    relationName: \"investor\"\n  }),\n  loan: one(loans, {\n    fields: [investments.loanId],\n    references: [loans.id],\n  }),\n}));\n\nexport const paymentsRelations = relations(payments, ({ one }) => ({\n  loan: one(loans, {\n    fields: [payments.loanId],\n    references: [loans.id],\n  }),\n}));\n\n// Schema types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type CreateUser = Omit<UpsertUser, \"id\" | \"createdAt\" | \"updatedAt\">;\n\nexport type InsertLoan = typeof loans.$inferInsert;\nexport type Loan = typeof loans.$inferSelect;\n\nexport type InsertInvestment = typeof investments.$inferInsert;\nexport type Investment = typeof investments.$inferSelect;\n\nexport type InsertPayment = typeof payments.$inferInsert;\nexport type Payment = typeof payments.$inferSelect;\n\n// Validation schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLoanSchema = createInsertSchema(loans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  creditScore: true,\n  creditGrade: true,\n  interestRate: true,\n  monthlyPayment: true,\n  fundedAt: true,\n});\n\nexport const insertInvestmentSchema = createInsertSchema(investments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  expectedReturn: true,\n  actualReturn: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Extended types for API responses\nexport type LoanWithDetails = Loan & {\n  borrower: Pick<User, \"firstName\" | \"lastName\">;\n  investments: Investment[];\n  totalFunded: string;\n  fundingPercentage: number;\n};\n\nexport type InvestmentWithDetails = Investment & {\n  loan: Pick<Loan, \"amount\" | \"purpose\" | \"duration\" | \"creditGrade\" | \"status\">;\n  borrower: Pick<User, \"firstName\" | \"lastName\">;\n};\n\nexport type UserWithStats = User & {\n  totalInvested?: string;\n  totalBorrowed?: string;\n  activeLoans?: number;\n  activeInvestments?: number;\n  totalReturn?: string;\n  avgReturn?: string;\n};\n","size_bytes":7159},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useEffect } from \"react\";\n\nimport { Navigation } from \"@/components/navigation\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport AuthPage from \"@/pages/auth-page\";\nimport Home from \"@/pages/home\";\nimport LoanApplication from \"@/pages/loan-application\";\nimport BorrowerDashboard from \"@/pages/borrower-dashboard\";\nimport InvestorDashboard from \"@/pages/investor-dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport Marketplace from \"@/pages/marketplace\";\nimport Profile from \"@/pages/profile\";\nimport Settings from \"@/pages/settings\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Switch>\n        {isLoading || !isAuthenticated ? (\n          <>\n            <Route path=\"/auth\" component={AuthPage} />\n            <Route path=\"/\" component={Landing} />\n          </>\n        ) : (\n          <div>\n            <Navigation />\n            <Route path=\"/\" component={Home} />\n            <Route path=\"/loan-application\" component={LoanApplication} />\n            <Route path=\"/borrower-dashboard\" component={BorrowerDashboard} />\n            <Route path=\"/investor-dashboard\" component={InvestorDashboard} />\n            <Route path=\"/admin-dashboard\" component={AdminDashboard} />\n            <Route path=\"/marketplace\" component={Marketplace} />\n            <Route path=\"/profile\" component={Profile} />\n            <Route path=\"/settings\" component={Settings} />\n          </div>\n        )}\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nfunction App() {\n  useEffect(() => {\n    document.title = \"FinScoreX - Peer-to-Peer Lending Platform\";\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2244},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(0 0% 93%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 96%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(222.2 84% 4.9%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 84% 4.9%);\n  --muted: hsl(210 40% 90%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 88%);\n  --accent-foreground: hsl(222.2 84% 4.9%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214.3 31.8% 85%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(222.2 84% 4.9%);\n  --chart-1: hsl(12 76% 61%);\n  --chart-2: hsl(173 58% 39%);\n  --chart-3: hsl(197 37% 24%);\n  --chart-4: hsl(43 74% 66%);\n  --chart-5: hsl(27 87% 67%);\n  --radius: 0.5rem;\n\n  /* FinScoreX Custom Colors */\n  --finscorex-primary: hsl(222 84% 35%);\n  --finscorex-secondary: hsl(158 64% 40%);\n  --finscorex-danger: hsl(0 74% 42%);\n  --finscorex-neutral-50: hsl(216 100% 98%);\n  --finscorex-neutral-100: hsl(218 27% 94%);\n  --finscorex-neutral-800: hsl(219 39% 11%);\n  --finscorex-neutral-900: hsl(224 71% 4%);\n  --font-inter: 'Inter', sans-serif;\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(217.2 32.6% 15%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(210 40% 98%);\n  --primary-foreground: hsl(222.2 84% 4.9%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(217.2 32.6% 17.5%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(212.7 26.8% 83.9%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground font-inter;\n  }\n}\n\n/* Custom FinScoreX Utilities */\n.bg-finscorex-primary {\n  background-color: var(--finscorex-primary);\n}\n\n/* Force dropdown/popover backgrounds to be visible */\n[data-radix-popper-content-wrapper] {\n  background-color: hsl(0 0% 96%) !important;\n}\n\n.dropdown-menu-content,\n.popover-content,\n[role=\"menu\"],\n[data-radix-collection-item],\n[data-radix-select-content],\n[data-radix-dropdown-menu-content] {\n  background-color: hsl(0 0% 96%) !important;\n  border: 1px solid hsl(0 0% 80%) !important;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1) !important;\n}\n\n/* All select and dropdown items */\n[data-radix-select-item],\n[data-radix-dropdown-menu-item],\n.dropdown-menu-item,\n[role=\"menuitem\"],\n[role=\"option\"] {\n  background-color: transparent !important;\n  color: hsl(210 25% 7.8431%) !important;\n}\n\n[data-radix-select-item]:hover,\n[data-radix-dropdown-menu-item]:hover,\n.dropdown-menu-item:hover,\n[role=\"menuitem\"]:hover,\n[role=\"option\"]:hover {\n  background-color: hsl(0 0% 90%) !important;\n}\n\n/* Radix Select components */\n.select-content {\n  background-color: hsl(0 0% 96%) !important;\n  border: 1px solid hsl(0 0% 80%) !important;\n}\n\n.select-item {\n  background-color: transparent !important;\n  color: hsl(210 25% 7.8431%) !important;\n}\n\n.select-item:hover {\n  background-color: hsl(0 0% 90%) !important;\n}\n\n.bg-finscorex-secondary {\n  background-color: var(--finscorex-secondary);\n}\n\n.text-finscorex-primary {\n  color: var(--finscorex-primary);\n}\n\n.text-finscorex-secondary {\n  color: var(--finscorex-secondary);\n}\n\n.border-finscorex-primary {\n  border-color: var(--finscorex-primary);\n}\n\n.font-inter {\n  font-family: var(--font-inter);\n}\n\n/* Smooth transitions for fintech feel */\n.transition-finscorex {\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/* Custom scrollbar */\n.scrollbar-thin::-webkit-scrollbar {\n  width: 6px;\n}\n\n.scrollbar-thin::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n.scrollbar-thin::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground));\n  border-radius: 3px;\n}\n\n.scrollbar-thin::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--finscorex-primary));\n}\n","size_bytes":4550},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/language-provider.tsx":{"content":"import { ReactNode } from \"react\";\n\ninterface LanguageProviderProps {\n  children: ReactNode;\n}\n\n// Simple wrapper - language state is now global\nexport function LanguageProvider({ children }: LanguageProviderProps) {\n  return <>{children}</>;\n}","size_bytes":244},"client/src/components/language-switcher.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { Globe, Check } from \"lucide-react\";\nimport { useSimpleLanguage } from \"@/hooks/useSimpleLanguage\";\n\nexport function LanguageSwitcher() {\n  const { language, setLanguage } = useSimpleLanguage();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"gap-2\" data-testid=\"language-switcher\">\n          <Globe className=\"h-4 w-4\" />\n          {language === \"fr\" ? \"FR\" : \"EN\"}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem \n          onClick={() => setLanguage(\"fr\")}\n          className=\"gap-2\"\n          data-testid=\"language-fr\"\n        >\n          {language === \"fr\" && <Check className=\"h-4 w-4\" />}\n          <span className={language !== \"fr\" ? \"ml-6\" : \"\"}>Français</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => setLanguage(\"en\")}\n          className=\"gap-2\"\n          data-testid=\"language-en\"\n        >\n          {language === \"en\" && <Check className=\"h-4 w-4\" />}\n          <span className={language !== \"en\" ? \"ml-6\" : \"\"}>English</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1399},"client/src/components/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Coins, User, Settings, LogOut, Menu } from \"lucide-react\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\n\n\n\n\nexport function Navigation() {\n  const { user, isAuthenticated } = useAuth();\n  const [location] = useLocation();\n\n\n\n  const navigationItems = [\n    { href: \"/marketplace\", label: \"Marketplace\", roles: [\"investor\", \"borrower\"] },\n    { href: \"/loan-application\", label: \"Apply for Loan\", roles: [\"borrower\"] },\n    { href: \"/borrower-dashboard\", label: \"My Loans\", roles: [\"borrower\"] },\n    { href: \"/investor-dashboard\", label: \"My Investments\", roles: [\"investor\"] },\n    { href: \"/admin-dashboard\", label: \"Admin Dashboard\", roles: [\"admin\"] },\n  ];\n\n  const userInitials = user \n    ? `${user.firstName?.[0] || ''}${user.lastName?.[0] || ''}`.toUpperCase() || user.email?.[0]?.toUpperCase() || 'U'\n    : 'U';\n\n  const filteredNavItems = navigationItems.filter(item => \n    !user?.userType || item.roles.includes(user.userType)\n  );\n\n  if (!isAuthenticated) {\n    return (\n      <nav className=\"bg-white shadow-lg border-b border-neutral-100 sticky top-0 z-50\" data-testid=\"navigation\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"logo-link\">\n              <Coins className=\"text-primary text-2xl\" />\n              <span className=\"text-xl font-bold text-neutral-800\">FinScoreX</span>\n            </Link>\n            <div className=\"flex items-center space-x-4\">\n\n              \n              <Link href=\"/auth\" className=\"text-primary hover:text-blue-700 font-medium transition-colors duration-200\" data-testid=\"login-link\">\n                Log in\n              </Link>\n              <Link href=\"/auth\" className=\"bg-primary text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-200\" data-testid=\"register-link\">\n                Sign up\n              </Link>\n            </div>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n\n  return (\n    <nav className=\"bg-white shadow-lg border-b border-neutral-100 sticky top-0 z-50\" data-testid=\"navigation\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"logo-link\">\n            <Coins className=\"text-primary text-2xl\" />\n            <span className=\"text-xl font-bold text-neutral-800\">FinScoreX</span>\n          </Link>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex space-x-6\">\n            {filteredNavItems.map((item) => (\n              <Link key={item.href} href={item.href}>\n                <button\n                  className={`text-neutral-600 hover:text-primary transition-colors duration-200 ${\n                    location === item.href ? 'text-primary font-medium' : ''\n                  }`}\n                  data-testid={`nav-link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  {item.label}\n                </button>\n              </Link>\n            ))}\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            {/* Mobile Menu */}\n            <Sheet>\n              <SheetTrigger asChild className=\"md:hidden\">\n                <Button variant=\"ghost\" size=\"icon\" data-testid=\"mobile-menu-trigger\">\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-80\">\n                <div className=\"flex flex-col space-y-4 mt-8\">\n                  {filteredNavItems.map((item) => (\n                    <Link key={item.href} href={item.href}>\n                      <button\n                        className={`w-full text-left px-4 py-2 rounded-lg transition-colors duration-200 ${\n                          location === item.href \n                            ? 'bg-primary text-white' \n                            : 'text-neutral-600 hover:bg-neutral-100'\n                        }`}\n                        data-testid={`mobile-nav-link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                      >\n                        {item.label}\n                      </button>\n                    </Link>\n                  ))}\n                </div>\n              </SheetContent>\n            </Sheet>\n\n            {/* User Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\" data-testid=\"user-menu-trigger\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src={user?.profileImageUrl || undefined} alt=\"Profile\" />\n                    <AvatarFallback>{userInitials}</AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount data-testid=\"user-menu\">\n                <div className=\"flex items-center justify-start gap-2 p-2\">\n                  <div className=\"flex flex-col space-y-1 leading-none\">\n                    {user?.firstName || user?.lastName ? (\n                      <p className=\"font-medium text-sm\" data-testid=\"user-name\">\n                        {user.firstName} {user.lastName}\n                      </p>\n                    ) : null}\n                    {user?.email && (\n                      <p className=\"w-[200px] truncate text-xs text-neutral-500\" data-testid=\"user-email\">\n                        {user.email}\n                      </p>\n                    )}\n                    {user?.userType && (\n                      <p className=\"text-xs text-neutral-500 capitalize\" data-testid=\"user-type\">\n                        {user.userType}\n                      </p>\n                    )}\n                  </div>\n                </div>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem asChild>\n                  <Link href=\"/profile\" className=\"cursor-pointer\" data-testid=\"profile-link\">\n                    <User className=\"mr-2 h-4 w-4\" />\n                    <span>Profile</span>\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem asChild>\n                  <Link href=\"/settings\" className=\"cursor-pointer\" data-testid=\"settings-link\">\n                    <Settings className=\"mr-2 h-4 w-4\" />\n                    <span>Settings</span>\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem asChild>\n                  <button \n                    onClick={async () => {\n                      try {\n                        await fetch('/api/logout', { method: 'POST', credentials: 'include' });\n                        window.location.href = '/auth';\n                      } catch (error) {\n                        console.error('Logout failed:', error);\n                        window.location.href = '/auth';\n                      }\n                    }}\n                    className=\"flex items-center cursor-pointer w-full text-left\" \n                    data-testid=\"logout-button\"\n                  >\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    <span>Log out</span>\n                  </button>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":7994},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { getQueryFn } from \"@/lib/queryClient\";\nimport type { PublicUser } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery<PublicUser | null>({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n  });\n\n  return {\n    user: user || null,\n    isLoading,\n    error,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":499},"client/src/hooks/useLanguage.ts":{"content":"import { useState, useEffect } from \"react\";\n\nexport type Language = \"en\" | \"fr\";\n\nconst translations = {\n  en: {\n    // Navigation\n    nav: {\n      marketplace: \"Marketplace\",\n      loanApplication: \"Apply for Loan\",\n      borrowerDashboard: \"My Loans\",\n      investorDashboard: \"My Investments\",\n      adminDashboard: \"Administration\",\n      profile: \"Profile\",\n      settings: \"Settings\",\n      logout: \"Log Out\",\n      login: \"Login\",\n      register: \"Sign Up\"\n    },\n    \n    // Landing Page\n    landing: {\n      hero: {\n        title: \"Revolutionize your\",\n        highlight1: \"investments\",\n        highlight2: \"loans\",\n        subtitle: \"Peer-to-peer lending platform with advanced algorithmic scoring for your professional portfolio.\"\n      },\n      cta: {\n        borrow: \"Request a Loan\",\n        invest: \"Become Investor\",\n        test: \"Test the Platform\",\n        stack: \"Tech Stack\"\n      },\n      platform: {\n        title: \"Advanced Technology Platform\",\n        subtitle: \"Portfolio project demonstrating the implementation of credit scoring algorithms and investment marketplace.\"\n      },\n      features: {\n        scoring: {\n          title: \"Advanced Credit Scoring\",\n          desc: \"Multi-criteria evaluation algorithm with weightings based on industry standards.\"\n        },\n        roi: {\n          title: \"Optimized ROI\", \n          desc: \"Return calculations with risk metrics and portfolio diversification.\"\n        },\n        security: {\n          title: \"Maximum Security\",\n          desc: \"Banking security protocols and automatic risk diversification.\"\n        }\n      },\n      borrower: {\n        title: \"Borrower Dashboard\",\n        desc: \"Manage your loan applications and track your repayments with our advanced financial analysis tools.\"\n      },\n      investor: {\n        title: \"Investor Dashboard\",\n        desc: \"Maximize your returns with our intelligent marketplace and automatic diversification system.\"\n      },\n      demo: {\n        title: \"Explore this Technical Demo\",\n        desc: \"Portfolio project demonstrating the implementation of a complete fintech platform.\",\n        test: \"Test the Platform\",\n        stack: \"Tech Stack\"\n      },\n      tech: {\n        backend: \"Backend & Database\",\n        algorithms: \"Financial Algorithms\"\n      }\n    },\n\n    // Home Page\n    home: {\n      welcome: \"Hello\",\n      messages: {\n        borrower: \"Manage your loans and funding requests\",\n        investor: \"Discover new investment opportunities\", \n        admin: \"Administrator dashboard\"\n      },\n      accountType: \"Account type\",\n      quickActions: \"Quick Actions\",\n      quickActionsDesc: \"Quickly access main features\",\n      recentActivity: \"Recent Activity\",\n      recentActivityDesc: \"Your latest transactions and notifications\",\n      actions: {\n        marketplace: \"Explore Marketplace\",\n        loan: \"Request a Loan\", \n        investments: \"Manage Investments\"\n      }\n    },\n\n    // Common\n    common: {\n      unauthorized: \"Unauthorized\",\n      unauthorizedDesc: \"You must be logged in. Redirecting...\",\n      error: \"Error\",\n      success: \"Success\",\n      loading: \"Loading...\",\n      save: \"Save\",\n      cancel: \"Cancel\",\n      close: \"Close\"\n    }\n  },\n  \n  fr: {\n    // Navigation\n    nav: {\n      marketplace: \"Marketplace\",\n      loanApplication: \"Demander un prêt\", \n      borrowerDashboard: \"Mes prêts\",\n      investorDashboard: \"Mes investissements\",\n      adminDashboard: \"Administration\",\n      profile: \"Profil\",\n      settings: \"Paramètres\",\n      logout: \"Se Déconnecter\",\n      login: \"Connexion\",\n      register: \"S'inscrire\"\n    },\n    \n    // Landing Page\n    landing: {\n      hero: {\n        title: \"Révolutionnez vos\",\n        highlight1: \"investissements\",\n        highlight2: \"emprunts\", \n        subtitle: \"Plateforme de prêt peer-to-peer avec scoring algorithmique avancé pour votre portfolio professionnel.\"\n      },\n      cta: {\n        borrow: \"Demander un Prêt\",\n        invest: \"Devenir Investisseur\",\n        test: \"Tester la Plateforme\",\n        stack: \"Stack Technique\"\n      },\n      platform: {\n        title: \"Plateforme Technologique Avancée\",\n        subtitle: \"Projet portfolio démontrant l'implémentation d'algorithmes de credit scoring et de marketplace d'investissement.\"\n      },\n      features: {\n        scoring: {\n          title: \"Credit Scoring Avancé\",\n          desc: \"Algorithme d'évaluation multi-critères avec pondération basée sur les standards de l'industrie.\"\n        },\n        roi: {\n          title: \"ROI Optimisé\",\n          desc: \"Calculs de rendement avec métriques de risque et diversification de portfolio.\" \n        },\n        security: {\n          title: \"Sécurité Maximale\",\n          desc: \"Protocoles de sécurité bancaire et diversification automatique des risques.\"\n        }\n      },\n      borrower: {\n        title: \"Dashboard Emprunteur\", \n        desc: \"Gérez vos demandes de prêt et suivez vos remboursements avec nos outils avancés d'analyse financière.\"\n      },\n      investor: {\n        title: \"Dashboard Investisseur\",\n        desc: \"Maximisez vos rendements avec notre marketplace intelligente et notre système de diversification automatique.\"\n      },\n      demo: {\n        title: \"Explorez cette Démo Technique\",\n        desc: \"Projet portfolio démontrant l'implémentation d'une plateforme fintech complète.\",\n        test: \"Tester la Plateforme\", \n        stack: \"Stack Technique\"\n      },\n      tech: {\n        backend: \"Backend & Base de Données\",\n        algorithms: \"Algorithmes Financiers\"\n      }\n    },\n\n    // Home Page  \n    home: {\n      welcome: \"Bonjour\",\n      messages: {\n        borrower: \"Gérez vos prêts et demandes de financement\",\n        investor: \"Découvrez de nouvelles opportunités d'investissement\",\n        admin: \"Tableau de bord administrateur\"\n      },\n      accountType: \"Type de compte\",\n      quickActions: \"Actions Rapides\",\n      quickActionsDesc: \"Accédez rapidement aux fonctionnalités principales\",\n      recentActivity: \"Activité Récente\",\n      recentActivityDesc: \"Vos dernières transactions et notifications\", \n      actions: {\n        marketplace: \"Explorer le Marketplace\",\n        loan: \"Demander un Prêt\",\n        investments: \"Gérer mes Investissements\"\n      }\n    },\n\n    // Common\n    common: {\n      unauthorized: \"Non autorisé\", \n      unauthorizedDesc: \"Vous devez être connecté. Redirection...\",\n      error: \"Erreur\",\n      success: \"Succès\",\n      loading: \"Chargement...\",\n      save: \"Sauvegarder\",\n      cancel: \"Annuler\",\n      close: \"Fermer\"\n    }\n  }\n};\n\nexport function useLanguage() {\n  const [language, setLanguage] = useState<Language>(() => {\n    // Start with English by default for international recruiters\n    const savedLanguage = localStorage.getItem(\"lendtech-language\");\n    return (savedLanguage as Language) || \"en\";\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"lendtech-language\", language);\n  }, [language]);\n\n  const t = (path: string): string => {\n    const keys = path.split(\".\");\n    let current: any = translations[language];\n    \n    for (const key of keys) {\n      if (current && typeof current === \"object\" && key in current) {\n        current = current[key];\n      } else {\n        // Fallback to English if translation is missing\n        let fallback: any = translations.en;\n        for (const fallbackKey of keys) {\n          if (fallback && typeof fallback === \"object\" && fallbackKey in fallback) {\n            fallback = fallback[fallbackKey];\n          } else {\n            return path; // Return the path as last resort\n          }\n        }\n        return typeof fallback === \"string\" ? fallback : path;\n      }\n    }\n    \n    return typeof current === \"string\" ? current : path;\n  };\n\n  return {\n    language,\n    setLanguage,\n    t\n  };\n}","size_bytes":7834},"client/src/hooks/useSimpleLanguage.ts":{"content":"import { useState } from \"react\";\n\ntype Language = \"fr\" | \"en\";\n\nconst translations = {\n  fr: {\n    // Navigation\n    \"nav.marketplace\": \"Marketplace\",\n    \"nav.loan-application\": \"Demander un prêt\",\n    \"nav.borrower-dashboard\": \"Mes prêts\",\n    \"nav.investor-dashboard\": \"Mes investissements\", \n    \"nav.admin-dashboard\": \"Administration\",\n    \"nav.profile\": \"Profil\",\n    \"nav.settings\": \"Paramètres\",\n    \"nav.logout\": \"Se Déconnecter\",\n    \"nav.login\": \"Connexion\",\n    \"nav.register\": \"S'inscrire\",\n    \n    // Landing page\n    \"landing.hero.title\": \"Révolutionnez vos\",\n    \"landing.hero.highlight1\": \"investissements\",\n    \"landing.hero.highlight2\": \"emprunts\",\n    \"landing.hero.subtitle\": \"Plateforme de prêt peer-to-peer avec scoring algorithmique avancé pour votre portfolio professionnel.\",\n    \"landing.cta.borrow\": \"Demander un Prêt\",\n    \"landing.cta.invest\": \"Devenir Investisseur\",\n    \"landing.platform.title\": \"Plateforme Technologique Avancée\",\n    \"landing.platform.subtitle\": \"Projet d'étude démontrant l'implémentation d'algorithmes de credit scoring et de marketplace d'investissement.\",\n    \"landing.features.scoring.title\": \"Credit Scoring Avancé\",\n    \"landing.features.scoring.desc\": \"Algorithme d'évaluation multi-critères avec pondération basée sur les standards de l'industrie.\",\n    \"landing.features.roi.title\": \"ROI Optimisé\",\n    \"landing.features.roi.desc\": \"Calculs de rendement avec métriques de risque et diversification de portfolio.\",\n    \"landing.features.security.title\": \"Sécurité Maximale\",\n    \"landing.features.security.desc\": \"Protocoles de sécurité bancaire et diversification automatique des risques.\",\n    \"landing.borrower.title\": \"Dashboard Emprunteur\",\n    \"landing.borrower.desc\": \"Gérez vos demandes de prêt et suivez vos remboursements avec nos outils avancés d'analyse financière.\",\n    \"landing.investor.title\": \"Dashboard Investisseur\", \n    \"landing.investor.desc\": \"Maximisez vos rendements avec notre marketplace intelligente et notre système de diversification automatique.\",\n    \"landing.cta.title\": \"Explorez cette Démo Technique\",\n    \"landing.cta.desc\": \"Projet portfolio démontrant l'implémentation d'une plateforme fintech complète.\",\n    \"landing.cta.test\": \"Tester la Plateforme\",\n    \"landing.cta.stack\": \"Stack Technique\",\n    \"landing.tech.backend\": \"Backend & Base de Données\",\n    \"landing.tech.algorithms\": \"Algorithmes Financiers\",\n  },\n  en: {\n    // Navigation\n    \"nav.marketplace\": \"Marketplace\",\n    \"nav.loan-application\": \"Apply for Loan\",\n    \"nav.borrower-dashboard\": \"My Loans\",\n    \"nav.investor-dashboard\": \"My Investments\",\n    \"nav.admin-dashboard\": \"Administration\",\n    \"nav.profile\": \"Profile\",\n    \"nav.settings\": \"Settings\",\n    \"nav.logout\": \"Log Out\",\n    \"nav.login\": \"Login\",\n    \"nav.register\": \"Sign Up\",\n    \n    // Landing page\n    \"landing.hero.title\": \"Revolutionize your\",\n    \"landing.hero.highlight1\": \"investments\",\n    \"landing.hero.highlight2\": \"loans\",\n    \"landing.hero.subtitle\": \"Peer-to-peer lending platform with advanced algorithmic scoring for your professional portfolio.\",\n    \"landing.cta.borrow\": \"Request a Loan\",\n    \"landing.cta.invest\": \"Become Investor\",\n    \"landing.platform.title\": \"Advanced Technology Platform\",\n    \"landing.platform.subtitle\": \"Study project demonstrating the implementation of credit scoring algorithms and investment marketplace.\",\n    \"landing.features.scoring.title\": \"Advanced Credit Scoring\",\n    \"landing.features.scoring.desc\": \"Multi-criteria evaluation algorithm with weightings based on industry standards.\",\n    \"landing.features.roi.title\": \"Optimized ROI\",\n    \"landing.features.roi.desc\": \"Return calculations with risk metrics and portfolio diversification.\",\n    \"landing.features.security.title\": \"Maximum Security\",\n    \"landing.features.security.desc\": \"Banking security protocols and automatic risk diversification.\",\n    \"landing.borrower.title\": \"Borrower Dashboard\",\n    \"landing.borrower.desc\": \"Manage your loan applications and track your repayments with our advanced financial analysis tools.\",\n    \"landing.investor.title\": \"Investor Dashboard\",\n    \"landing.investor.desc\": \"Maximize your returns with our intelligent marketplace and automatic diversification system.\",\n    \"landing.cta.title\": \"Explore this Technical Demo\",\n    \"landing.cta.desc\": \"Portfolio project demonstrating the implementation of a complete fintech platform.\",\n    \"landing.cta.test\": \"Test the Platform\",\n    \"landing.cta.stack\": \"Tech Stack\",\n    \"landing.tech.backend\": \"Backend & Database\",\n    \"landing.tech.algorithms\": \"Financial Algorithms\",\n  }\n};\n\nexport function useSimpleLanguage() {\n  const [language, setLanguage] = useState<Language>(\"fr\");\n\n  const t = (key: string): string => {\n    const keys = key.split(\".\");\n    let value: any = translations[language];\n    \n    for (const k of keys) {\n      if (value && typeof value === \"object\" && k in value) {\n        value = value[k];\n      } else {\n        return key;\n      }\n    }\n    \n    return typeof value === \"string\" ? value : key;\n  };\n\n  return { language, setLanguage, t };\n}","size_bytes":5140},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/credit-scoring.ts":{"content":"// Credit scoring algorithm implementation\n// Based on industry standards with weighted criteria\n\nexport interface CreditProfile {\n  annualIncome: number;\n  currentDebt: number;\n  employmentYears: number;\n  creditHistory: number; // years\n  previousLoans: number;\n  homeOwnership: \"rent\" | \"own\" | \"mortgage\";\n  bankAccount: boolean;\n}\n\nexport function calculateCreditScore(profile: CreditProfile): number {\n  let score = 300; // Base score\n  \n  // Income score (35% weight) - max 315 points\n  const incomeScore = calculateIncomeScore(profile.annualIncome);\n  score += incomeScore * 0.35;\n  \n  // Debt-to-Income ratio (20% weight) - max 180 points  \n  const dtiScore = calculateDTIScore(profile.annualIncome, profile.currentDebt);\n  score += dtiScore * 0.20;\n  \n  // Credit history (25% weight) - max 225 points\n  const historyScore = calculateHistoryScore(profile.creditHistory, profile.previousLoans);\n  score += historyScore * 0.25;\n  \n  // Employment stability (10% weight) - max 90 points\n  const employmentScore = calculateEmploymentScore(profile.employmentYears);\n  score += employmentScore * 0.10;\n  \n  // Housing situation (5% weight) - max 45 points\n  const housingScore = calculateHousingScore(profile.homeOwnership);\n  score += housingScore * 0.05;\n  \n  // Bank account (5% weight) - max 45 points\n  const bankScore = profile.bankAccount ? 90 : 0;\n  score += bankScore * 0.05;\n  \n  // Cap the score at 850 (excellent credit)\n  return Math.min(850, Math.round(score));\n}\n\nfunction calculateIncomeScore(income: number): number {\n  // Higher income = higher score (max 315 points for base calculation)\n  if (income >= 100000) return 315;\n  if (income >= 75000) return 280;\n  if (income >= 50000) return 240;\n  if (income >= 35000) return 200;\n  if (income >= 25000) return 160;\n  if (income >= 15000) return 120;\n  return 80;\n}\n\nfunction calculateDTIScore(income: number, debt: number): number {\n  if (income <= 0) return 0;\n  \n  const dtiRatio = (debt * 12) / income; // Convert monthly debt to annual\n  \n  // Lower DTI = higher score (max 180 points for base calculation)\n  if (dtiRatio <= 0.15) return 180;\n  if (dtiRatio <= 0.25) return 150;\n  if (dtiRatio <= 0.35) return 120;\n  if (dtiRatio <= 0.45) return 90;\n  if (dtiRatio <= 0.55) return 60;\n  return 30;\n}\n\nfunction calculateHistoryScore(creditHistory: number, previousLoans: number): number {\n  let historyScore = 0;\n  \n  // Credit history length bonus (max 150 points)\n  if (creditHistory >= 10) historyScore += 150;\n  else if (creditHistory >= 7) historyScore += 120;\n  else if (creditHistory >= 5) historyScore += 90;\n  else if (creditHistory >= 3) historyScore += 60;\n  else if (creditHistory >= 1) historyScore += 30;\n  \n  // Previous loans experience (max 75 points)\n  if (previousLoans >= 3) historyScore += 75;\n  else if (previousLoans >= 2) historyScore += 50;\n  else if (previousLoans >= 1) historyScore += 25;\n  \n  return Math.min(225, historyScore);\n}\n\nfunction calculateEmploymentScore(employmentYears: number): number {\n  // Longer employment = more stability (max 90 points for base calculation)\n  if (employmentYears >= 5) return 90;\n  if (employmentYears >= 3) return 70;\n  if (employmentYears >= 2) return 50;\n  if (employmentYears >= 1) return 30;\n  return 10;\n}\n\nfunction calculateHousingScore(homeOwnership: string): number {\n  // Housing stability indicator (max 45 points for base calculation)\n  switch (homeOwnership) {\n    case \"own\": return 45;\n    case \"mortgage\": return 35;\n    case \"rent\": return 20;\n    default: return 0;\n  }\n}\n\nexport function calculateInterestRate(creditScore: number): number {\n  // Interest rate based on credit score\n  // Higher score = lower rate\n  if (creditScore >= 750) return 6.5;  // Grade A\n  if (creditScore >= 700) return 8.2;  // Grade A\n  if (creditScore >= 650) return 10.8; // Grade B\n  if (creditScore >= 600) return 13.5; // Grade B\n  if (creditScore >= 550) return 16.2; // Grade C\n  if (creditScore >= 500) return 19.5; // Grade C\n  if (creditScore >= 450) return 22.8; // Grade D\n  return 26.5; // Grade E\n}\n\nexport function getCreditGrade(creditScore: number): \"A\" | \"B\" | \"C\" | \"D\" | \"E\" {\n  if (creditScore >= 750) return \"A\";\n  if (creditScore >= 650) return \"B\";\n  if (creditScore >= 550) return \"C\";  \n  if (creditScore >= 450) return \"D\";\n  return \"E\";\n}\n\nexport function getCreditGradeDescription(grade: string): string {\n  switch (grade) {\n    case \"A\": return \"Excellent - Très faible risque\";\n    case \"B\": return \"Bon - Risque modéré\";\n    case \"C\": return \"Correct - Risque élevé\";\n    case \"D\": return \"Faible - Risque très élevé\";\n    case \"E\": return \"Mauvais - Risque critique\";\n    default: return \"Non évalué\";\n  }\n}\n\nexport function calculateMonthlyPayment(\n  principal: number,\n  annualRate: number,\n  termInMonths: number\n): number {\n  if (annualRate === 0) {\n    return principal / termInMonths;\n  }\n  \n  const monthlyRate = annualRate / 100 / 12;\n  const payment = principal * (monthlyRate * Math.pow(1 + monthlyRate, termInMonths)) /\n    (Math.pow(1 + monthlyRate, termInMonths) - 1);\n  \n  return payment;\n}\n\nexport function getRiskFactors(profile: CreditProfile): Array<{\n  factor: string;\n  risk: \"low\" | \"medium\" | \"high\";\n  description: string;\n}> {\n  const factors = [];\n  \n  const dtiRatio = profile.currentDebt * 12 / profile.annualIncome;\n  \n  // Income risk\n  if (profile.annualIncome < 25000) {\n    factors.push({\n      factor: \"Revenus faibles\",\n      risk: \"high\" as const,\n      description: \"Revenus inférieurs à 25,000€ par an\"\n    });\n  } else if (profile.annualIncome < 50000) {\n    factors.push({\n      factor: \"Revenus modérés\",\n      risk: \"medium\" as const,\n      description: \"Revenus entre 25,000€ et 50,000€ par an\"\n    });\n  }\n  \n  // DTI risk\n  if (dtiRatio > 0.45) {\n    factors.push({\n      factor: \"Ratio d'endettement élevé\",\n      risk: \"high\" as const,\n      description: `Ratio dette/revenus de ${(dtiRatio * 100).toFixed(1)}%`\n    });\n  } else if (dtiRatio > 0.25) {\n    factors.push({\n      factor: \"Ratio d'endettement modéré\",\n      risk: \"medium\" as const,\n      description: `Ratio dette/revenus de ${(dtiRatio * 100).toFixed(1)}%`\n    });\n  }\n  \n  // Credit history risk\n  if (profile.creditHistory < 3) {\n    factors.push({\n      factor: \"Historique crédit limité\",\n      risk: \"high\" as const,\n      description: `Moins de 3 ans d'historique crédit`\n    });\n  } else if (profile.creditHistory < 7) {\n    factors.push({\n      factor: \"Historique crédit moyen\",\n      risk: \"medium\" as const,\n      description: `${profile.creditHistory} ans d'historique crédit`\n    });\n  }\n  \n  // Employment risk\n  if (profile.employmentYears < 2) {\n    factors.push({\n      factor: \"Emploi récent\",\n      risk: \"medium\" as const,\n      description: `Moins de 2 ans dans l'emploi actuel`\n    });\n  }\n  \n  return factors;\n}\n","size_bytes":6847},"client/src/lib/financial-calculations.ts":{"content":"// Financial calculation utilities for the lending platform\n\nexport function calculateMonthlyPayment(\n  principal: number,\n  annualRate: number,\n  termInMonths: number\n): number {\n  if (annualRate === 0) {\n    return principal / termInMonths;\n  }\n  \n  const monthlyRate = annualRate / 100 / 12;\n  const payment = principal * (monthlyRate * Math.pow(1 + monthlyRate, termInMonths)) /\n    (Math.pow(1 + monthlyRate, termInMonths) - 1);\n  \n  return payment;\n}\n\nexport function calculateTotalInterest(\n  principal: number,\n  annualRate: number,\n  termInMonths: number\n): number {\n  const monthlyPayment = calculateMonthlyPayment(principal, annualRate, termInMonths);\n  const totalPayments = monthlyPayment * termInMonths;\n  return totalPayments - principal;\n}\n\nexport function generateAmortizationSchedule(\n  principal: number,\n  annualRate: number,\n  termInMonths: number\n): Array<{\n  month: number;\n  payment: number;\n  principal: number;\n  interest: number;\n  balance: number;\n}> {\n  const schedule = [];\n  const monthlyRate = annualRate / 100 / 12;\n  const monthlyPayment = calculateMonthlyPayment(principal, annualRate, termInMonths);\n  \n  let remainingBalance = principal;\n  \n  for (let month = 1; month <= termInMonths; month++) {\n    const interestPayment = remainingBalance * monthlyRate;\n    const principalPayment = monthlyPayment - interestPayment;\n    remainingBalance -= principalPayment;\n    \n    schedule.push({\n      month,\n      payment: monthlyPayment,\n      principal: principalPayment,\n      interest: interestPayment,\n      balance: Math.max(0, remainingBalance)\n    });\n  }\n  \n  return schedule;\n}\n\nexport function calculateROI(\n  investedAmount: number,\n  currentValue: number,\n  timeInMonths: number\n): {\n  totalReturn: number;\n  annualizedReturn: number;\n  totalReturnPercentage: number;\n} {\n  const totalReturn = currentValue - investedAmount;\n  const totalReturnPercentage = (totalReturn / investedAmount) * 100;\n  const annualizedReturn = Math.pow(currentValue / investedAmount, 12 / timeInMonths) - 1;\n  \n  return {\n    totalReturn,\n    annualizedReturn: annualizedReturn * 100,\n    totalReturnPercentage\n  };\n}\n\nexport function calculateRiskMetrics(investments: Array<{\n  amount: number;\n  creditGrade: string;\n  actualReturn: number;\n}>): {\n  diversificationScore: number;\n  averageGrade: string;\n  riskDistribution: Record<string, number>;\n} {\n  const gradeWeights = { 'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5 };\n  const totalAmount = investments.reduce((sum, inv) => sum + inv.amount, 0);\n  \n  const riskDistribution: Record<string, number> = {};\n  let weightedGradeSum = 0;\n  \n  investments.forEach(inv => {\n    const grade = inv.creditGrade;\n    if (!riskDistribution[grade]) {\n      riskDistribution[grade] = 0;\n    }\n    riskDistribution[grade] += inv.amount;\n    weightedGradeSum += (gradeWeights[grade as keyof typeof gradeWeights] || 5) * inv.amount;\n  });\n  \n  // Convert to percentages\n  Object.keys(riskDistribution).forEach(grade => {\n    riskDistribution[grade] = (riskDistribution[grade] / totalAmount) * 100;\n  });\n  \n  // Calculate diversification score (higher is better, max 100)\n  const uniqueGrades = Object.keys(riskDistribution).length;\n  const maxConcentration = Math.max(...Object.values(riskDistribution));\n  const diversificationScore = Math.min(100, (uniqueGrades * 20) + (100 - maxConcentration));\n  \n  // Calculate average grade\n  const avgGradeValue = weightedGradeSum / totalAmount;\n  const averageGrade = Object.entries(gradeWeights)\n    .reduce((closest, [grade, value]) => \n      Math.abs(value - avgGradeValue) < Math.abs(gradeWeights[closest as keyof typeof gradeWeights] - avgGradeValue) \n        ? grade : closest, 'E'\n    );\n  \n  return {\n    diversificationScore,\n    averageGrade,\n    riskDistribution\n  };\n}\n\nexport function formatCurrency(amount: number | string): string {\n  const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return new Intl.NumberFormat('fr-FR', {\n    style: 'currency',\n    currency: 'EUR',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(num);\n}\n\nexport function formatPercentage(value: number): string {\n  return new Intl.NumberFormat('fr-FR', {\n    style: 'percent',\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 1,\n  }).format(value / 100);\n}\n","size_bytes":4293},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { MetricCard } from \"@/components/ui/metric-card\";\nimport { ChartCard } from \"@/components/ui/chart-card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Users, \n  DollarSign, \n  TrendingUp, \n  AlertTriangle,\n  Shield,\n  BarChart3,\n  Activity,\n  Target\n} from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/financial-calculations\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function AdminDashboard() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  // Redirect if not authenticated or not an admin\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || (user && user.userType !== \"admin\"))) {\n      toast({\n        title: \"Accès refusé\",\n        description: \"Seuls les administrateurs peuvent accéder à cette page.\",\n        variant: \"destructive\",\n      });\n      setLocation(\"/\");\n    }\n  }, [isAuthenticated, isLoading, user, toast, setLocation]);\n\n  const { data: platformMetrics, isLoading: metricsLoading } = useQuery({\n    queryKey: [\"/api/admin/metrics\"],\n    enabled: !isLoading && !!user && user.userType === \"admin\",\n    retry: false,\n  });\n\n  const { data: allLoans, isLoading: loansLoading } = useQuery({\n    queryKey: [\"/api/admin/loans\"],\n    enabled: !isLoading && !!user && user.userType === \"admin\",\n    retry: false,\n  });\n\n  if (isLoading || !user || user.userType !== \"admin\") {\n    return (\n      <div className=\"min-h-screen bg-neutral-50 p-6\">\n        <div className=\"max-w-7xl mx-auto space-y-6\">\n          <Skeleton className=\"h-12 w-64\" />\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Skeleton className=\"h-32\" />\n            <Skeleton className=\"h-32\" />\n            <Skeleton className=\"h-32\" />\n            <Skeleton className=\"h-32\" />\n          </div>\n          <Skeleton className=\"h-64\" />\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"approved\":\n      case \"funded\":\n      case \"active\":\n        return \"default\";\n      case \"completed\":\n        return \"secondary\";\n      case \"defaulted\":\n        return \"destructive\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const getGradeBadgeColor = (grade: string) => {\n    switch (grade) {\n      case \"A\":\n        return \"bg-secondary text-white\";\n      case \"B\":\n        return \"bg-primary text-white\";\n      case \"C\":\n        return \"bg-yellow-500 text-white\";\n      case \"D\":\n        return \"bg-orange-500 text-white\";\n      case \"E\":\n        return \"bg-red-500 text-white\";\n      default:\n        return \"bg-neutral-500 text-white\";\n    }\n  };\n\n  // Calculate loan distribution by status\n  const loansByStatus = allLoans?.reduce((acc: Record<string, number>, loan) => {\n    acc[loan.status] = (acc[loan.status] || 0) + 1;\n    return acc;\n  }, {}) || {};\n\n  // Calculate loan distribution by grade\n  const loansByGrade = allLoans?.reduce((acc: Record<string, number>, loan) => {\n    const grade = loan.creditGrade || \"E\";\n    acc[grade] = (acc[grade] || 0) + 1;\n    return acc;\n  }, {}) || {};\n\n  const totalLoans = allLoans?.length || 0;\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50 p-6\" data-testid=\"admin-dashboard\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        {/* Header */}\n        <div>\n          <h1 className=\"text-3xl font-bold text-neutral-800 mb-2\" data-testid=\"dashboard-title\">\n            Administration\n          </h1>\n          <p className=\"text-xl text-neutral-600\">\n            Platform overview and global metrics\n          </p>\n        </div>\n\n        {/* Platform Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <MetricCard\n            title=\"Total Loans\"\n            value={metricsLoading ? \"...\" : (platformMetrics?.totalLoans || 0)}\n            changeType=\"positive\"\n            change=\"+12% this month\"\n            icon={<Users className=\"h-4 w-4\" />}\n            className=\"border-primary/20\"\n            data-testid=\"metric-total-loans\"\n          />\n          <MetricCard\n            title=\"Volume Total\"\n            value={metricsLoading ? \"...\" : formatCurrency(platformMetrics?.totalVolume || \"0\")}\n            changeType=\"positive\"\n            change=\"+18% this month\"\n            icon={<DollarSign className=\"h-4 w-4\" />}\n            className=\"border-secondary/20\"\n            data-testid=\"metric-total-volume\"\n          />\n          <MetricCard\n            title=\"Default Rate\"\n            value={metricsLoading ? \"...\" : `${platformMetrics?.defaultRate || \"0\"}%`}\n            changeType=\"negative\"\n            change=\"-0.3% this month\"\n            icon={<AlertTriangle className=\"h-4 w-4\" />}\n            className=\"border-orange-500/20\"\n            data-testid=\"metric-default-rate\"\n          />\n          <MetricCard\n            title=\"ROI Moyen\"\n            value={metricsLoading ? \"...\" : `${platformMetrics?.avgReturn || \"0\"}%`}\n            changeType=\"positive\"\n            change=\"+1.1% this month\"\n            icon={<TrendingUp className=\"h-4 w-4\" />}\n            className=\"border-secondary/20\"\n            data-testid=\"metric-average-roi\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Loan Status Distribution */}\n          <ChartCard\n            title=\"Status Distribution\"\n            description=\"Loan distribution by current status\"\n            data-testid=\"status-distribution\"\n          >\n            {loansLoading ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3, 4].map((i) => (\n                  <Skeleton key={i} className=\"h-8\" />\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {Object.entries(loansByStatus).map(([status, count]) => {\n                  const percentage = totalLoans > 0 ? (count / totalLoans) * 100 : 0;\n                  return (\n                    <div key={status} className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant={getStatusBadgeVariant(status)}>\n                            {status}\n                          </Badge>\n                          <span className=\"text-sm text-neutral-600 capitalize\">\n                            {status === \"submitted\" && \"Soumis\"}\n                            {status === \"under_review\" && \"En révision\"}\n                            {status === \"approved\" && \"Approuvés\"}\n                            {status === \"funded\" && \"Financés\"}\n                            {status === \"active\" && \"Actifs\"}\n                            {status === \"completed\" && \"Complétés\"}\n                            {status === \"defaulted\" && \"En défaut\"}\n                            {![\"submitted\", \"under_review\", \"approved\", \"funded\", \"active\", \"completed\", \"defaulted\"].includes(status) && status}\n                          </span>\n                        </div>\n                        <div className=\"text-right\">\n                          <span className=\"text-sm font-medium\">{count}</span>\n                          <span className=\"text-xs text-neutral-500 ml-2\">\n                            ({percentage.toFixed(1)}%)\n                          </span>\n                        </div>\n                      </div>\n                      <Progress value={percentage} className=\"h-2\" />\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </ChartCard>\n\n          {/* Credit Grade Distribution */}\n          <ChartCard\n            title=\"Distribution par Grade\"\n            description=\"Loan distribution by credit grade\"\n            data-testid=\"grade-distribution\"\n          >\n            {loansLoading ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3, 4, 5].map((i) => (\n                  <Skeleton key={i} className=\"h-8\" />\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {Object.entries(loansByGrade).map(([grade, count]) => {\n                  const percentage = totalLoans > 0 ? (count / totalLoans) * 100 : 0;\n                  return (\n                    <div key={grade} className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className={`text-xs px-2 py-1 rounded font-medium ${getGradeBadgeColor(grade)}`}>\n                            Grade {grade}\n                          </span>\n                          <span className=\"text-sm text-neutral-600\">\n                            {grade === \"A\" && \"Excellent - Très faible risque\"}\n                            {grade === \"B\" && \"Bon - Risque modéré\"}\n                            {grade === \"C\" && \"Correct - Risque élevé\"}\n                            {grade === \"D\" && \"Faible - Risque très élevé\"}\n                            {grade === \"E\" && \"Mauvais - Risque critique\"}\n                          </span>\n                        </div>\n                        <div className=\"text-right\">\n                          <span className=\"text-sm font-medium\">{count}</span>\n                          <span className=\"text-xs text-neutral-500 ml-2\">\n                            ({percentage.toFixed(1)}%)\n                          </span>\n                        </div>\n                      </div>\n                      <Progress value={percentage} className=\"h-2\" />\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </ChartCard>\n        </div>\n\n        {/* Risk Analysis */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <Card data-testid=\"risk-analysis\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"h-5 w-5\" />\n                Analyse des Risques\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-neutral-600\">Low risk loans (A-B)</span>\n                  <span className=\"font-semibold text-secondary\">\n                    {((((loansByGrade.A || 0) + (loansByGrade.B || 0)) / totalLoans) * 100 || 0).toFixed(1)}%\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-neutral-600\">High risk loans (D-E)</span>\n                  <span className=\"font-semibold text-orange-500\">\n                    {((((loansByGrade.D || 0) + (loansByGrade.E || 0)) / totalLoans) * 100 || 0).toFixed(1)}%\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-neutral-600\">Defaulted loans</span>\n                  <span className=\"font-semibold text-red-500\">\n                    {((loansByStatus.defaulted || 0) / totalLoans * 100 || 0).toFixed(1)}%\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"platform-health\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Activity className=\"h-5 w-5\" />\n                Santé de la Plateforme\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-neutral-600\">Approval Rate</span>\n                  <span className=\"font-semibold text-primary\">\n                    {((((loansByStatus.approved || 0) + (loansByStatus.funded || 0) + (loansByStatus.active || 0)) / totalLoans) * 100 || 0).toFixed(1)}%\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-neutral-600\">Funding Rate</span>\n                  <span className=\"font-semibold text-secondary\">\n                    {(((loansByStatus.funded || 0) + (loansByStatus.active || 0)) / totalLoans * 100 || 0).toFixed(1)}%\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-neutral-600\">Completed loans</span>\n                  <span className=\"font-semibold text-neutral-800\">\n                    {((loansByStatus.completed || 0) / totalLoans * 100 || 0).toFixed(1)}%\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"performance-indicators\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"h-5 w-5\" />\n                KPIs Clés\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-neutral-600\">Ticket moyen</span>\n                  <span className=\"font-semibold text-neutral-800\">\n                    {formatCurrency((parseFloat(platformMetrics?.totalVolume || \"0\") / (platformMetrics?.totalLoans || 1)).toString())}\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-neutral-600\">ROI plateforme</span>\n                  <span className=\"font-semibold text-secondary\">\n                    {platformMetrics?.avgReturn || \"0\"}%\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-neutral-600\">Croissance mensuelle</span>\n                  <span className=\"font-semibold text-primary\">\n                    +15.2%\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Loans */}\n        <Card data-testid=\"recent-loans\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BarChart3 className=\"h-5 w-5\" />\n              Recent Loans\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {loansLoading ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3, 4, 5].map((i) => (\n                  <Skeleton key={i} className=\"h-16\" />\n                ))}\n              </div>\n            ) : allLoans && allLoans.length > 0 ? (\n              <div className=\"space-y-4\">\n                {allLoans.slice(0, 10).map((loan) => (\n                  <div \n                    key={loan.id} \n                    className=\"flex items-center justify-between p-4 bg-neutral-50 rounded-lg border\"\n                    data-testid={`recent-loan-${loan.id}`}\n                  >\n                    <div className=\"flex items-center gap-4\">\n                      <span className={`text-xs px-2 py-1 rounded font-medium ${getGradeBadgeColor(loan.creditGrade || \"E\")}`}>\n                        {loan.creditGrade || \"E\"}\n                      </span>\n                      <div>\n                        <div className=\"font-medium text-neutral-800\">\n                          {loan.purpose.length > 50 \n                            ? `${loan.purpose.substring(0, 50)}...` \n                            : loan.purpose\n                          }\n                        </div>\n                        <div className=\"text-sm text-neutral-500\">\n                          {loan.borrower.firstName} {loan.borrower.lastName} • Score: {loan.creditScore}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-semibold text-neutral-800\">\n                        {formatCurrency(loan.amount)}\n                      </div>\n                      <Badge variant={getStatusBadgeVariant(loan.status)}>\n                        {loan.status}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-neutral-500\">\n                <BarChart3 className=\"h-12 w-12 mx-auto mb-4 text-neutral-300\" />\n                <p>No loans available</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17361},"client/src/pages/borrower-dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation, Link } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { MetricCard } from \"@/components/ui/metric-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  DollarSign, \n  TrendingUp, \n  Clock, \n  CheckCircle,\n  AlertCircle,\n  Plus,\n  Eye,\n  Calendar,\n  Calculator,\n  Trash2\n} from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/financial-calculations\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function BorrowerDashboard() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Redirect if not authenticated or not a borrower\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || (user && user.userType !== \"borrower\"))) {\n      toast({\n        title: \"Access denied\",\n        description: \"Only borrowers can access this page.\",\n        variant: \"destructive\",\n      });\n      setLocation(\"/\");\n    }\n  }, [isAuthenticated, isLoading, user, toast, setLocation]);\n\n  const { data: userLoans, isLoading: loansLoading } = useQuery({\n    queryKey: [\"/api/loans/my\"],\n    enabled: !isLoading && !!user && user.userType === \"borrower\",\n    retry: false,\n  });\n\n  const deleteLoanMutation = useMutation({\n    mutationFn: async (loanId: string) => {\n      return await apiRequest(\"DELETE\", `/api/loans/${loanId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/loans/my\"] });\n      toast({\n        title: \"Loan deleted\",\n        description: \"Your loan application has been successfully deleted.\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Delete failed\",\n        description: error.message || \"Failed to delete the loan application.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading || !user || user.userType !== \"borrower\") {\n    return (\n      <div className=\"min-h-screen bg-neutral-50 p-6\">\n        <div className=\"max-w-7xl mx-auto space-y-6\">\n          <Skeleton className=\"h-12 w-64\" />\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Skeleton className=\"h-32\" />\n            <Skeleton className=\"h-32\" />\n            <Skeleton className=\"h-32\" />\n          </div>\n          <Skeleton className=\"h-64\" />\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"approved\":\n      case \"funded\":\n      case \"active\":\n        return \"default\";\n      case \"completed\":\n        return \"secondary\";\n      case \"defaulted\":\n        return \"destructive\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"approved\":\n      case \"funded\":\n      case \"active\":\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case \"completed\":\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case \"defaulted\":\n        return <AlertCircle className=\"h-4 w-4\" />;\n      default:\n        return <Clock className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case \"draft\": return \"Draft\";\n      case \"submitted\": return \"Submitted\";\n      case \"under_review\": return \"Under review\";\n      case \"approved\": return \"Approved\";\n      case \"funded\": return \"Funded\";\n      case \"active\": return \"Active\";\n      case \"completed\": return \"Completed\";\n      case \"defaulted\": return \"Defaulted\";\n      default: return status;\n    }\n  };\n\n  const loans = (userLoans as any[]) || [];\n  const activeLoans = loans.filter((loan: any) => \n    [\"approved\", \"funded\", \"active\"].includes(loan.status)\n  );\n\n  const totalBorrowed = loans.reduce((sum: number, loan: any) => \n    sum + parseFloat(loan.amount), 0\n  );\n\n  const totalFunded = loans.reduce((sum: number, loan: any) => \n    sum + parseFloat(loan.totalFunded || \"0\"), 0\n  );\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50 p-6\" data-testid=\"borrower-dashboard\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-neutral-800 mb-2\" data-testid=\"dashboard-title\">\n              My Loans\n            </h1>\n            <p className=\"text-xl text-neutral-600\">\n              Manage your loan applications and track your repayments\n            </p>\n          </div>\n          <Link href=\"/loan-application\">\n            <Button className=\"bg-primary hover:bg-blue-700\" data-testid=\"new-loan-button\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New Application\n            </Button>\n          </Link>\n        </div>\n\n        {/* Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <MetricCard\n            title=\"Active Loans\"\n            value={activeLoans.length}\n            icon={<DollarSign className=\"h-4 w-4\" />}\n            className=\"border-primary/20\"\n            data-testid=\"metric-active-loans\"\n          />\n          <MetricCard\n            title=\"Total Requested\"\n            value={formatCurrency(totalBorrowed)}\n            icon={<TrendingUp className=\"h-4 w-4\" />}\n            className=\"border-secondary/20\"\n            data-testid=\"metric-total-requested\"\n          />\n          <MetricCard\n            title=\"Total Funded\"\n            value={formatCurrency(totalFunded)}\n            changeType=\"positive\"\n            change={`${((totalFunded / totalBorrowed) * 100 || 0).toFixed(1)}% of total`}\n            icon={<CheckCircle className=\"h-4 w-4\" />}\n            data-testid=\"metric-total-funded\"\n          />\n          <MetricCard\n            title=\"Total Loans\"\n            value={loans.length}\n            icon={<Eye className=\"h-4 w-4\" />}\n            data-testid=\"metric-total-loans\"\n          />\n        </div>\n\n        {/* Loans List */}\n        <Card data-testid=\"loans-list-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calculator className=\"h-5 w-5\" />\n              Application History\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {loansLoading ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3].map((i) => (\n                  <Skeleton key={i} className=\"h-24\" />\n                ))}\n              </div>\n            ) : loans && loans.length > 0 ? (\n              <div className=\"space-y-4\">\n                {loans.map((loan: any) => (\n                  <div \n                    key={loan.id} \n                    className=\"p-6 bg-neutral-50 rounded-xl border border-neutral-200 hover:shadow-md transition-shadow\"\n                    data-testid={`loan-card-${loan.id}`}\n                  >\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"flex items-center gap-2\">\n                          {getStatusIcon(loan.status)}\n                          <h3 className=\"text-lg font-semibold text-neutral-800\">\n                            {loan.purpose.length > 50 \n                              ? `${loan.purpose.substring(0, 50)}...` \n                              : loan.purpose\n                            }\n                          </h3>\n                        </div>\n                        <Badge \n                          variant={getStatusBadgeVariant(loan.status)}\n                          data-testid={`loan-status-${loan.id}`}\n                        >\n                          {getStatusText(loan.status)}\n                        </Badge>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-primary\">\n                          {formatCurrency(loan.amount)}\n                        </div>\n                        <div className=\"text-sm text-neutral-500\">\n                          {loan.duration} mois\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n                      <div className=\"text-center p-3 bg-white rounded-lg\">\n                        <div className=\"text-sm text-neutral-500\">Credit Score</div>\n                        <div className=\"text-lg font-bold text-secondary\">\n                          {loan.creditScore || \"N/A\"}\n                        </div>\n                        {loan.creditGrade && (\n                          <div className=\"text-xs text-neutral-400\">\n                            Grade {loan.creditGrade}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"text-center p-3 bg-white rounded-lg\">\n                        <div className=\"text-sm text-neutral-500\">Interest Rate</div>\n                        <div className=\"text-lg font-bold text-neutral-800\">\n                          {loan.interestRate ? `${loan.interestRate}%` : \"N/A\"}\n                        </div>\n                      </div>\n                      <div className=\"text-center p-3 bg-white rounded-lg\">\n                        <div className=\"text-sm text-neutral-500\">Monthly Payment</div>\n                        <div className=\"text-lg font-bold text-neutral-800\">\n                          {loan.monthlyPayment ? formatCurrency(loan.monthlyPayment) : \"N/A\"}\n                        </div>\n                      </div>\n                      <div className=\"text-center p-3 bg-white rounded-lg\">\n                        <div className=\"text-sm text-neutral-500\">Funded</div>\n                        <div className=\"text-lg font-bold text-primary\">\n                          {formatCurrency(loan.totalFunded || \"0\")}\n                        </div>\n                        <div className=\"text-xs text-neutral-400\">\n                          {loan.fundingPercentage.toFixed(1)}%\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Funding Progress */}\n                    {loan.status === \"approved\" && (\n                      <div className=\"mb-4\">\n                        <div className=\"flex justify-between items-center mb-2\">\n                          <span className=\"text-sm text-neutral-600\">Progression du financement</span>\n                          <span className=\"text-sm font-medium\">\n                            {loan.fundingPercentage.toFixed(1)}%\n                          </span>\n                        </div>\n                        <Progress \n                          value={loan.fundingPercentage} \n                          className=\"h-2\"\n                          data-testid={`funding-progress-${loan.id}`}\n                        />\n                      </div>\n                    )}\n\n                    {/* Investments Summary */}\n                    {loan.investments && loan.investments.length > 0 && (\n                      <div className=\"border-t border-neutral-200 pt-4\">\n                        <h4 className=\"text-sm font-medium text-neutral-700 mb-3\">\n                          Investisseurs ({loan.investments.length})\n                        </h4>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                          {loan.investments.slice(0, 3).map((investment: any, index: number) => (\n                            <div \n                              key={investment.id} \n                              className=\"flex items-center justify-between p-3 bg-white rounded-lg border\"\n                              data-testid={`investment-${investment.id}`}\n                            >\n                              <div className=\"flex items-center gap-3\">\n                                <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n                                  <span className=\"text-white text-xs font-bold\">\n                                    {index + 1}\n                                  </span>\n                                </div>\n                                <div>\n                                  <div className=\"text-sm font-medium text-neutral-800\">\n                                    Investisseur #{index + 1}\n                                  </div>\n                                  <div className=\"text-xs text-neutral-500\">\n                                    {formatCurrency(investment.amount)}\n                                  </div>\n                                </div>\n                              </div>\n                              <div className=\"text-right\">\n                                <div className=\"text-sm font-semibold text-secondary\">\n                                  {investment.interestRate}%\n                                </div>\n                                <div className=\"text-xs text-neutral-400\">\n                                  {investment.status}\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                        {loan.investments.length > 3 && (\n                          <div className=\"text-center mt-3\">\n                            <span className=\"text-sm text-neutral-500\">\n                              +{loan.investments.length - 3} other investors\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                    )}\n\n                    {/* Action Buttons */}\n                    <div className=\"flex gap-3 mt-4 pt-4 border-t border-neutral-200\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => {\n                          // For now, show a toast with loan details\n                          toast({\n                            title: \"Loan Details\",\n                            description: `Loan #${loan.id.slice(0, 8)}... - Amount: €${loan.amount.toLocaleString()} - Rate: ${loan.interestRate}% - Status: ${loan.status}`,\n                          });\n                        }}\n                        data-testid={`view-details-${loan.id}`}\n                      >\n                        <Eye className=\"h-4 w-4 mr-2\" />\n                        Details\n                      </Button>\n                      {loan.status === \"active\" && (\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          data-testid={`view-payments-${loan.id}`}\n                        >\n                          <Calendar className=\"h-4 w-4 mr-2\" />\n                          Schedule\n                        </Button>\n                      )}\n                      {/* Show delete button only if no investments */}\n                      {(!loan.investments || loan.investments.length === 0) && (\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => {\n                            if (window.confirm(\"Are you sure you want to delete this loan application? This action cannot be undone.\")) {\n                              deleteLoanMutation.mutate(loan.id);\n                            }\n                          }}\n                          disabled={deleteLoanMutation.isPending}\n                          data-testid={`delete-loan-${loan.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4 mr-2\" />\n                          {deleteLoanMutation.isPending ? \"Deleting...\" : \"Delete\"}\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\" data-testid=\"no-loans-message\">\n                <Calculator className=\"h-16 w-16 mx-auto mb-4 text-neutral-300\" />\n                <h3 className=\"text-lg font-medium text-neutral-700 mb-2\">\n                  No loan applications\n                </h3>\n                <p className=\"text-neutral-500 mb-6\">\n                  Start by making your first loan application\n                </p>\n                <Link href=\"/loan-application\">\n                  <Button data-testid=\"first-loan-button\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    First Application\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17582},"client/src/pages/home.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { MetricCard } from \"@/components/ui/metric-card\";\nimport { Link } from \"wouter\";\nimport { \n  TrendingUp, \n  DollarSign, \n  Users, \n  PieChart,\n  ArrowRight,\n  Plus,\n  Eye\n} from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { formatCurrency } from \"@/lib/financial-calculations\";\n\nexport default function Home() {\n  const { user, isLoading } = useAuth();\n\n  const { data: userStats } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    enabled: !isLoading && !!user,\n  });\n\n  const { data: marketplaceLoans } = useQuery({\n    queryKey: [\"/api/loans/marketplace\"],\n    enabled: !isLoading && !!user,\n  });\n\n  const { data: userLoans } = useQuery({\n    queryKey: [\"/api/loans/my\"],\n    enabled: !isLoading && !!user && user?.userType === \"borrower\",\n  });\n\n  const { data: userInvestments } = useQuery({\n    queryKey: [\"/api/investments/my\"],\n    enabled: !isLoading && !!user && user?.userType === \"investor\",\n  });\n\n  if (isLoading || !user) {\n    return (\n      <div className=\"min-h-screen bg-neutral-50 p-6\">\n        <div className=\"max-w-7xl mx-auto space-y-6\">\n          <Skeleton className=\"h-12 w-64\" />\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Skeleton className=\"h-32\" />\n            <Skeleton className=\"h-32\" />\n            <Skeleton className=\"h-32\" />\n          </div>\n          <Skeleton className=\"h-64\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50 p-6\" data-testid=\"home-page\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        {/* Welcome Header */}\n        <div className=\"bg-white rounded-xl shadow-sm p-8 border border-neutral-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-neutral-800 mb-2\" data-testid=\"welcome-message\">\n                Hello, {user.firstName || user.email?.split('@')[0]}!\n              </h1>\n              <p className=\"text-xl text-neutral-600\" data-testid=\"user-type-message\">\n                {user.userType === \"borrower\" && \"Manage your loans and funding requests\"}\n                {user.userType === \"investor\" && \"Discover new investment opportunities\"}\n                {user.userType === \"admin\" && \"Administrator dashboard\"}\n              </p>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm text-neutral-500\">Account type</p>\n              <p className=\"text-lg font-semibold text-primary capitalize\" data-testid=\"account-type\">\n                {user.userType}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {user.userType === \"borrower\" && (\n            <>\n              <MetricCard\n                title=\"Active Loans\"\n                value={userStats?.activeLoans || 0}\n                icon={<DollarSign className=\"h-4 w-4\" />}\n                className=\"border-primary/20\"\n                data-testid=\"metric-active-loans\"\n              />\n              <MetricCard\n                title=\"Total Borrowed\"\n                value={formatCurrency(userStats?.totalBorrowed || \"0\")}\n                icon={<TrendingUp className=\"h-4 w-4\" />}\n                className=\"border-secondary/20\"\n                data-testid=\"metric-total-borrowed\"\n              />\n              <MetricCard\n                title=\"Nouvelles Offres\"\n                value={marketplaceLoans?.length || 0}\n                changeType=\"positive\"\n                change=\"Disponibles\"\n                icon={<Eye className=\"h-4 w-4\" />}\n                data-testid=\"metric-available-loans\"\n              />\n            </>\n          )}\n\n          {user.userType === \"investor\" && (\n            <>\n              <MetricCard\n                title=\"Total Invested\"\n                value={formatCurrency(userStats?.totalInvested || \"0\")}\n                icon={<DollarSign className=\"h-4 w-4\" />}\n                className=\"border-primary/20\"\n                data-testid=\"metric-total-invested\"\n              />\n              <MetricCard\n                title=\"Gains Totaux\"\n                value={formatCurrency(userStats?.totalReturn || \"0\")}\n                changeType=\"positive\"\n                change={`ROI: ${userStats?.avgReturn || \"0\"}%`}\n                icon={<TrendingUp className=\"h-4 w-4\" />}\n                className=\"border-secondary/20\"\n                data-testid=\"metric-total-returns\"\n              />\n              <MetricCard\n                title=\"Active Investments\"\n                value={userStats?.activeInvestments || 0}\n                icon={<PieChart className=\"h-4 w-4\" />}\n                data-testid=\"metric-active-investments\"\n              />\n            </>\n          )}\n\n          {user.userType === \"admin\" && (\n            <>\n              <MetricCard\n                title=\"Utilisateurs\"\n                value=\"2,847\"\n                changeType=\"positive\"\n                change=\"+12% ce mois\"\n                icon={<Users className=\"h-4 w-4\" />}\n                data-testid=\"metric-total-users\"\n              />\n              <MetricCard\n                title=\"Volume Total\"\n                value=\"€42.8M\"\n                changeType=\"positive\"\n                change=\"+18% ce mois\"\n                icon={<DollarSign className=\"h-4 w-4\" />}\n                data-testid=\"metric-total-volume\"\n              />\n              <MetricCard\n                title=\"ROI Moyen\"\n                value=\"11.2%\"\n                changeType=\"positive\"\n                change=\"+1.1% ce mois\"\n                icon={<TrendingUp className=\"h-4 w-4\" />}\n                data-testid=\"metric-average-roi\"\n              />\n            </>\n          )}\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          <Card data-testid=\"quick-actions-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Plus className=\"h-5 w-5\" />\n                Quick Actions\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {user.userType === \"borrower\" && (\n                <>\n                  <Link href=\"/loan-application\">\n                    <Button className=\"w-full justify-between\" data-testid=\"action-new-loan\">\n                      New Loan Application\n                      <ArrowRight className=\"h-4 w-4\" />\n                    </Button>\n                  </Link>\n                  <Link href=\"/borrower-dashboard\">\n                    <Button variant=\"outline\" className=\"w-full justify-between\" data-testid=\"action-view-loans\">\n                      Manage My Loans\n                      <ArrowRight className=\"h-4 w-4\" />\n                    </Button>\n                  </Link>\n                </>\n              )}\n\n              {user.userType === \"investor\" && (\n                <>\n                  <Link href=\"/marketplace\">\n                    <Button className=\"w-full justify-between\" data-testid=\"action-browse-marketplace\">\n                      Explorer la Marketplace\n                      <ArrowRight className=\"h-4 w-4\" />\n                    </Button>\n                  </Link>\n                  <Link href=\"/investor-dashboard\">\n                    <Button variant=\"outline\" className=\"w-full justify-between\" data-testid=\"action-view-portfolio\">\n                      Voir Mon Portfolio\n                      <ArrowRight className=\"h-4 w-4\" />\n                    </Button>\n                  </Link>\n                </>\n              )}\n\n              {user.userType === \"admin\" && (\n                <>\n                  <Link href=\"/admin-dashboard\">\n                    <Button className=\"w-full justify-between\" data-testid=\"action-admin-dashboard\">\n                      Tableau de Bord Admin\n                      <ArrowRight className=\"h-4 w-4\" />\n                    </Button>\n                  </Link>\n                  <Link href=\"/marketplace\">\n                    <Button variant=\"outline\" className=\"w-full justify-between\" data-testid=\"action-manage-platform\">\n                      Gérer la Plateforme\n                      <ArrowRight className=\"h-4 w-4\" />\n                    </Button>\n                  </Link>\n                </>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Recent Activity */}\n          <Card data-testid=\"recent-activity-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                Activité Récente\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {user.userType === \"borrower\" && userLoans && userLoans.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {userLoans.slice(0, 3).map((loan) => (\n                    <div key={loan.id} className=\"flex items-center justify-between p-3 bg-neutral-50 rounded-lg\" data-testid={`recent-loan-${loan.id}`}>\n                      <div>\n                        <p className=\"font-medium text-neutral-800\">{loan.purpose}</p>\n                        <p className=\"text-sm text-neutral-500\">{formatCurrency(loan.amount)}</p>\n                      </div>\n                      <span className={`text-xs px-2 py-1 rounded-full font-medium ${\n                        loan.status === 'approved' ? 'bg-secondary/20 text-secondary' :\n                        loan.status === 'funded' ? 'bg-primary/20 text-primary' :\n                        'bg-neutral-200 text-neutral-600'\n                      }`}>\n                        {loan.status}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              ) : user.userType === \"investor\" && userInvestments && userInvestments.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {userInvestments.slice(0, 3).map((investment) => (\n                    <div key={investment.id} className=\"flex items-center justify-between p-3 bg-neutral-50 rounded-lg\" data-testid={`recent-investment-${investment.id}`}>\n                      <div>\n                        <p className=\"font-medium text-neutral-800\">{investment.loan.purpose}</p>\n                        <p className=\"text-sm text-neutral-500\">{formatCurrency(investment.amount)} investis</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm font-medium text-secondary\">{investment.interestRate}%</p>\n                        <p className=\"text-xs text-neutral-500\">Grade {investment.loan.creditGrade}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-neutral-500\" data-testid=\"no-recent-activity\">\n                  <TrendingUp className=\"h-12 w-12 mx-auto mb-4 text-neutral-300\" />\n                  <p>No recent activity</p>\n                  <p className=\"text-sm\">\n                    {user.userType === \"borrower\" && \"Start by making a loan application\"}\n                    {user.userType === \"investor\" && \"Explore the marketplace for your first investments\"}\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Marketplace Preview */}\n        {marketplaceLoans && marketplaceLoans.length > 0 && (\n          <Card data-testid=\"marketplace-preview-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span className=\"flex items-center gap-2\">\n                  <PieChart className=\"h-5 w-5\" />\n                  Opportunités du Moment\n                </span>\n                <Link href=\"/marketplace\">\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"view-all-marketplace\">\n                    Voir Tout\n                    <ArrowRight className=\"h-4 w-4 ml-2\" />\n                  </Button>\n                </Link>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {marketplaceLoans.slice(0, 3).map((loan) => (\n                  <div key={loan.id} className=\"p-4 bg-neutral-50 rounded-lg border\" data-testid={`marketplace-loan-${loan.id}`}>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className={`text-xs px-2 py-1 rounded font-medium ${\n                        loan.creditGrade === 'A' ? 'bg-secondary text-white' :\n                        loan.creditGrade === 'B' ? 'bg-primary text-white' :\n                        'bg-yellow-500 text-white'\n                      }`}>\n                        Grade {loan.creditGrade}\n                      </span>\n                      <span className=\"text-sm font-semibold text-secondary\">{loan.interestRate}%</span>\n                    </div>\n                    <p className=\"font-medium text-neutral-800 mb-1\">{formatCurrency(loan.amount)}</p>\n                    <p className=\"text-sm text-neutral-600 mb-2\">{loan.purpose}</p>\n                    <div className=\"flex justify-between items-center text-xs text-neutral-500\">\n                      <span>Score: {loan.creditScore}</span>\n                      <span>{loan.duration} mois</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":13940},"client/src/pages/investor-dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { MetricCard } from \"@/components/ui/metric-card\";\nimport { ChartCard } from \"@/components/ui/chart-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  DollarSign, \n  TrendingUp, \n  PieChart, \n  Target,\n  Eye,\n  Plus,\n  ArrowUpRight,\n  Shield\n} from \"lucide-react\";\nimport { formatCurrency, calculateRiskMetrics } from \"@/lib/financial-calculations\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function InvestorDashboard() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  // Redirect if not authenticated or not an investor\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || (user && user.userType !== \"investor\"))) {\n      toast({\n        title: \"Accès refusé\",\n        description: \"Seuls les investisseurs peuvent accéder à cette page.\",\n        variant: \"destructive\",\n      });\n      setLocation(\"/\");\n    }\n  }, [isAuthenticated, isLoading, user, toast, setLocation]);\n\n  const { data: userInvestments, isLoading: investmentsLoading } = useQuery({\n    queryKey: [\"/api/investments/my\"],\n    enabled: !isLoading && !!user && user.userType === \"investor\",\n    retry: false,\n  });\n\n  const { data: userStats } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    enabled: !isLoading && !!user,\n  });\n\n  const { data: marketplaceLoans } = useQuery({\n    queryKey: [\"/api/loans/marketplace\"],\n    enabled: !isLoading && !!user,\n  });\n\n  if (isLoading || !user || user.userType !== \"investor\") {\n    return (\n      <div className=\"min-h-screen bg-neutral-50 p-6\">\n        <div className=\"max-w-7xl mx-auto space-y-6\">\n          <Skeleton className=\"h-12 w-64\" />\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Skeleton className=\"h-32\" />\n            <Skeleton className=\"h-32\" />\n            <Skeleton className=\"h-32\" />\n          </div>\n          <Skeleton className=\"h-64\" />\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"active\":\n      case \"confirmed\":\n        return \"default\";\n      case \"completed\":\n        return \"secondary\";\n      case \"cancelled\":\n        return \"destructive\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const getGradeBadgeColor = (grade: string) => {\n    switch (grade) {\n      case \"A\":\n        return \"bg-secondary text-white\";\n      case \"B\":\n        return \"bg-primary text-white\";\n      case \"C\":\n        return \"bg-yellow-500 text-white\";\n      case \"D\":\n        return \"bg-orange-500 text-white\";\n      case \"E\":\n        return \"bg-red-500 text-white\";\n      default:\n        return \"bg-neutral-500 text-white\";\n    }\n  };\n\n  // Calculate portfolio metrics\n  const totalInvested = parseFloat(userStats?.totalInvested || \"0\");\n  const totalReturn = parseFloat(userStats?.totalReturn || \"0\");\n  const avgReturn = parseFloat(userStats?.avgReturn || \"0\");\n  const activeInvestments = userStats?.activeInvestments || 0;\n\n  // Calculate risk metrics if we have investments\n  const riskMetrics = userInvestments && userInvestments.length > 0 \n    ? calculateRiskMetrics(userInvestments.map(inv => ({\n        amount: parseFloat(inv.amount),\n        creditGrade: inv.loan.creditGrade || \"E\",\n        actualReturn: parseFloat(inv.actualReturn || \"0\")\n      })))\n    : null;\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50 p-6\" data-testid=\"investor-dashboard\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-neutral-800 mb-2\" data-testid=\"dashboard-title\">\n              Investment Portfolio\n            </h1>\n            <p className=\"text-xl text-neutral-600\">\n              Track your investments and discover new opportunities\n            </p>\n          </div>\n          <Link href=\"/marketplace\">\n            <Button className=\"bg-primary hover:bg-blue-700\" data-testid=\"marketplace-button\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New Investments\n            </Button>\n          </Link>\n        </div>\n\n        {/* Portfolio Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <MetricCard\n            title=\"Total Invested\"\n            value={formatCurrency(totalInvested)}\n            icon={<DollarSign className=\"h-4 w-4\" />}\n            className=\"border-primary/20\"\n            data-testid=\"metric-total-invested\"\n          />\n          <MetricCard\n            title=\"Total Returns\"\n            value={formatCurrency(totalReturn)}\n            changeType=\"positive\"\n            change={`ROI: ${avgReturn.toFixed(1)}%`}\n            icon={<TrendingUp className=\"h-4 w-4\" />}\n            className=\"border-secondary/20\"\n            data-testid=\"metric-total-gains\"\n          />\n          <MetricCard\n            title=\"Active Investments\"\n            value={activeInvestments}\n            icon={<Target className=\"h-4 w-4\" />}\n            data-testid=\"metric-active-investments\"\n          />\n          <MetricCard\n            title=\"Diversification\"\n            value={riskMetrics ? `${riskMetrics.diversificationScore.toFixed(0)}/100` : \"N/A\"}\n            changeType={riskMetrics && riskMetrics.diversificationScore >= 70 ? \"positive\" : \"neutral\"}\n            change={riskMetrics ? `Average Grade: ${riskMetrics.averageGrade}` : \"\"}\n            icon={<Shield className=\"h-4 w-4\" />}\n            data-testid=\"metric-diversification\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Portfolio Composition */}\n          <ChartCard\n            title=\"Risk Distribution\"\n            description=\"Distribution of your portfolio by credit grade\"\n            data-testid=\"portfolio-composition\"\n          >\n            {riskMetrics ? (\n              <div className=\"space-y-4\">\n                {Object.entries(riskMetrics.riskDistribution).map(([grade, percentage]) => (\n                  <div key={grade} className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className={`text-xs px-2 py-1 rounded font-medium ${getGradeBadgeColor(grade)}`}>\n                          Grade {grade}\n                        </span>\n                        <span className=\"text-sm text-neutral-600\">\n                          {grade === \"A\" && \"Très faible risque\"}\n                          {grade === \"B\" && \"Risque modéré\"}\n                          {grade === \"C\" && \"Risque élevé\"}\n                          {grade === \"D\" && \"Risque très élevé\"}\n                          {grade === \"E\" && \"Risque critique\"}\n                        </span>\n                      </div>\n                      <span className=\"text-sm font-medium\">{percentage.toFixed(1)}%</span>\n                    </div>\n                    <Progress value={percentage} className=\"h-2\" />\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-neutral-500\">\n                <PieChart className=\"h-12 w-12 mx-auto mb-4 text-neutral-300\" />\n                <p>No investments yet</p>\n                <p className=\"text-sm\">Start investing to see your portfolio distribution</p>\n              </div>\n            )}\n          </ChartCard>\n\n          {/* Recent Performance */}\n          <ChartCard\n            title=\"Recent Performance\"\n            description=\"Evolution of your returns over recent months\"\n            data-testid=\"performance-chart\"\n          >\n            <div className=\"text-center py-8 text-neutral-500\">\n              <TrendingUp className=\"h-12 w-12 mx-auto mb-4 text-neutral-300\" />\n              <p>Performance Chart</p>\n              <p className=\"text-sm\">To be implemented with historical data</p>\n            </div>\n          </ChartCard>\n        </div>\n\n        {/* My Investments */}\n        <Card data-testid=\"investments-list\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"h-5 w-5\" />\n              My Investments\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {investmentsLoading ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3].map((i) => (\n                  <Skeleton key={i} className=\"h-20\" />\n                ))}\n              </div>\n            ) : userInvestments && userInvestments.length > 0 ? (\n              <div className=\"space-y-4\">\n                {userInvestments.map((investment) => (\n                  <div \n                    key={investment.id} \n                    className=\"p-4 bg-neutral-50 rounded-lg border border-neutral-200 hover:shadow-md transition-shadow\"\n                    data-testid={`investment-card-${investment.id}`}\n                  >\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center gap-3\">\n                        <span className={`text-xs px-2 py-1 rounded font-medium ${getGradeBadgeColor(investment.loan.creditGrade || \"E\")}`}>\n                          Grade {investment.loan.creditGrade || \"E\"}\n                        </span>\n                        <h3 className=\"font-medium text-neutral-800\">\n                          {investment.loan.purpose.length > 40 \n                            ? `${investment.loan.purpose.substring(0, 40)}...` \n                            : investment.loan.purpose\n                          }\n                        </h3>\n                        <Badge variant={getStatusBadgeVariant(investment.status)}>\n                          {investment.status}\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-lg font-bold text-primary\">\n                          {formatCurrency(investment.amount)}\n                        </span>\n                        <ArrowUpRight className=\"h-4 w-4 text-secondary\" />\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                      <div className=\"text-center p-2 bg-white rounded\">\n                        <div className=\"text-sm text-neutral-500\">Rate</div>\n                        <div className=\"text-sm font-bold text-secondary\">\n                          {investment.interestRate}%\n                        </div>\n                      </div>\n                      <div className=\"text-center p-2 bg-white rounded\">\n                        <div className=\"text-sm text-neutral-500\">Duration</div>\n                        <div className=\"text-sm font-bold text-neutral-800\">\n                          {investment.loan.duration} months\n                        </div>\n                      </div>\n                      <div className=\"text-center p-2 bg-white rounded\">\n                        <div className=\"text-sm text-neutral-500\">Expected Returns</div>\n                        <div className=\"text-sm font-bold text-neutral-800\">\n                          {formatCurrency(investment.expectedReturn || \"0\")}\n                        </div>\n                      </div>\n                      <div className=\"text-center p-2 bg-white rounded\">\n                        <div className=\"text-sm text-neutral-500\">Actual Returns</div>\n                        <div className=\"text-sm font-bold text-secondary\">\n                          {formatCurrency(investment.actualReturn || \"0\")}\n                        </div>\n                      </div>\n                    </div>\n\n                    {investment.borrower && (\n                      <div className=\"mt-3 pt-3 border-t border-neutral-200\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"text-sm text-neutral-600\">\n                            Borrower: {investment.borrower.firstName} {investment.borrower.lastName?.[0]}.\n                          </div>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Eye className=\"h-4 w-4 mr-2\" />\n                            Details\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\" data-testid=\"no-investments-message\">\n                <Target className=\"h-16 w-16 mx-auto mb-4 text-neutral-300\" />\n                <h3 className=\"text-lg font-medium text-neutral-700 mb-2\">\n                  No Investments\n                </h3>\n                <p className=\"text-neutral-500 mb-6\">\n                  Explore the marketplace to start investing\n                </p>\n                <Link href=\"/marketplace\">\n                  <Button data-testid=\"first-investment-button\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    First Investment\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Marketplace Preview */}\n        {marketplaceLoans && marketplaceLoans.length > 0 && (\n          <Card data-testid=\"marketplace-preview\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span className=\"flex items-center gap-2\">\n                  <Eye className=\"h-5 w-5\" />\n                  New Opportunities\n                </span>\n                <Link href=\"/marketplace\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    View All\n                  </Button>\n                </Link>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {marketplaceLoans.slice(0, 3).map((loan) => (\n                  <div \n                    key={loan.id} \n                    className=\"p-4 bg-neutral-50 rounded-lg border border-neutral-200 hover:shadow-md transition-shadow cursor-pointer\"\n                    data-testid={`opportunity-${loan.id}`}\n                  >\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className={`text-xs px-2 py-1 rounded font-medium ${getGradeBadgeColor(loan.creditGrade || \"E\")}`}>\n                        Grade {loan.creditGrade || \"E\"}\n                      </span>\n                      <span className=\"text-sm font-semibold text-secondary\">\n                        {loan.interestRate}%\n                      </span>\n                    </div>\n                    <p className=\"font-medium text-neutral-800 mb-1\">\n                      {formatCurrency(loan.amount)}\n                    </p>\n                    <p className=\"text-sm text-neutral-600 mb-2\">\n                      {loan.purpose.length > 40 \n                        ? `${loan.purpose.substring(0, 40)}...` \n                        : loan.purpose\n                      }\n                    </p>\n                    <div className=\"flex justify-between items-center text-xs text-neutral-500\">\n                      <span>Score: {loan.creditScore}</span>\n                      <span>{loan.duration} months</span>\n                    </div>\n                    <div className=\"mt-2\">\n                      <div className=\"flex justify-between items-center mb-1\">\n                        <span className=\"text-xs text-neutral-500\">Funded</span>\n                        <span className=\"text-xs font-medium\">\n                          {loan.fundingPercentage.toFixed(1)}%\n                        </span>\n                      </div>\n                      <Progress value={loan.fundingPercentage} className=\"h-1\" />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":16666},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Coins, Calculator, TrendingUp, Shield, FileText, PieChart, Calendar, CheckCircle, Building } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-primary to-blue-600 text-white py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h1 className=\"text-4xl lg:text-5xl font-bold mb-6 leading-tight\" data-testid=\"hero-title\">\n                Revolutionize your <span className=\"text-blue-200\">investments</span> and <span className=\"text-blue-200\">loans</span>\n              </h1>\n              <p className=\"text-xl mb-8 text-blue-100 leading-relaxed\" data-testid=\"hero-description\">\n                FinScoreX: Advanced peer-to-peer lending platform with intelligent algorithmic scoring for your professional portfolio.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <a href=\"/auth\">\n                  <Button size=\"lg\" className=\"bg-white text-primary hover:bg-neutral-100 w-full sm:w-auto\" data-testid=\"cta-borrow\">\n                    Request a Loan\n                  </Button>\n                </a>\n                <a href=\"/auth\">\n                  <Button \n                    size=\"lg\" \n                    variant=\"outline\" \n                    className=\"border-2 border-white text-white hover:bg-white hover:text-primary w-full sm:w-auto\"\n                    data-testid=\"cta-invest\"\n                  >\n                    Become Investor\n                  </Button>\n                </a>\n              </div>\n            </div>\n            <div className=\"relative\" data-testid=\"hero-image\">\n              <img \n                src=\"https://images.unsplash.com/photo-1559526324-4b87b5e36e44?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80\" \n                alt=\"Modern trading and investment interface\" \n                className=\"rounded-xl shadow-2xl w-full h-auto\"\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Platform Overview */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-neutral-800 mb-4\" data-testid=\"platform-title\">\n              Advanced Technology Platform\n            </h2>\n            <p className=\"text-xl text-neutral-600 max-w-3xl mx-auto\" data-testid=\"platform-description\">\n              Portfolio project demonstrating the implementation of credit scoring algorithms and investment marketplace.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Card className=\"border-none shadow-lg hover:shadow-xl transition-shadow duration-300\" data-testid=\"feature-scoring\">\n              <CardContent className=\"p-8\">\n                <div className=\"bg-primary text-white w-12 h-12 rounded-lg flex items-center justify-center mb-6\">\n                  <Calculator className=\"text-xl\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-neutral-800 mb-4\">Advanced Credit Scoring</h3>\n                <p className=\"text-neutral-600 mb-4\">Multi-criteria evaluation algorithm with weightings based on industry standards.</p>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-neutral-600\">Income</span>\n                    <span className=\"font-medium text-secondary\">35%</span>\n                  </div>\n                  <div className=\"w-full bg-neutral-200 rounded-full h-2\">\n                    <div className=\"bg-secondary h-2 rounded-full\" style={{width: '35%'}}></div>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-neutral-600\">Debt Ratio</span>\n                    <span className=\"font-medium text-secondary\">25%</span>\n                  </div>\n                  <div className=\"w-full bg-neutral-200 rounded-full h-2\">\n                    <div className=\"bg-secondary h-2 rounded-full\" style={{width: '25%'}}></div>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-neutral-600\">Credit History</span>\n                    <span className=\"font-medium text-secondary\">40%</span>\n                  </div>\n                  <div className=\"w-full bg-neutral-200 rounded-full h-2\">\n                    <div className=\"bg-secondary h-2 rounded-full\" style={{width: '40%'}}></div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-none shadow-lg hover:shadow-xl transition-shadow duration-300\" data-testid=\"feature-roi\">\n              <CardContent className=\"p-8\">\n                <div className=\"bg-secondary text-white w-12 h-12 rounded-lg flex items-center justify-center mb-6\">\n                  <TrendingUp className=\"text-xl\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-neutral-800 mb-4\">Optimized ROI</h3>\n                <p className=\"text-neutral-600 mb-4\">Return calculations with risk metrics and portfolio diversification.</p>\n                <div className=\"bg-neutral-50 p-4 rounded-lg\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-sm text-neutral-600\">Automatic calculations</span>\n                    <span className=\"text-lg font-bold text-secondary\">ROI</span>\n                  </div>\n                  <div className=\"text-2xl font-bold text-neutral-800 mb-1\">12.4%</div>\n                  <div className=\"text-sm text-secondary\">Average annual return</div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-none shadow-lg hover:shadow-xl transition-shadow duration-300\" data-testid=\"feature-security\">\n              <CardContent className=\"p-8\">\n                <div className=\"bg-blue-500 text-white w-12 h-12 rounded-lg flex items-center justify-center mb-6\">\n                  <Shield className=\"text-xl\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-neutral-800 mb-4\">Maximum Security</h3>\n                <p className=\"text-neutral-600 mb-4\">Banking security protocols and automatic risk diversification.</p>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"text-secondary text-sm\" />\n                    <span className=\"text-sm text-neutral-600\">256-bit SSL encryption</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"text-secondary text-sm\" />\n                    <span className=\"text-sm text-neutral-600\">PCI DSS compliance</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"text-secondary text-sm\" />\n                    <span className=\"text-sm text-neutral-600\">Guarantee fund</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Preview */}\n      <section className=\"py-20 bg-neutral-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center mb-20\">\n            <div>\n              <h2 className=\"text-3xl lg:text-4xl font-bold text-neutral-800 mb-6\" data-testid=\"borrower-section-title\">\n                Borrower Dashboard\n              </h2>\n              <p className=\"text-xl text-neutral-600 mb-8\">\n                Manage your loan applications and track your repayments with our advanced financial analysis tools.\n              </p>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <FileText className=\"text-primary\" />\n                  <span className=\"text-neutral-700\">Smart application form</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <PieChart className=\"text-primary\" />\n                  <span className=\"text-neutral-700\">Real-time credit score</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <Calendar className=\"text-primary\" />\n                  <span className=\"text-neutral-700\">Repayment scheduler</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"bg-white rounded-xl shadow-xl p-6\" data-testid=\"borrower-dashboard-preview\">\n              <div className=\"mb-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold text-neutral-800\">My Loan Application</h3>\n                  <span className=\"bg-blue-100 text-primary px-3 py-1 rounded-full text-sm font-medium\">Under Review</span>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                  <div className=\"text-center p-4 bg-neutral-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-neutral-800\">$25,000</div>\n                    <div className=\"text-sm text-neutral-600\">Requested amount</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-neutral-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-secondary\">742</div>\n                    <div className=\"text-sm text-neutral-600\">Credit score</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"bg-white rounded-xl shadow-xl p-6 order-2 lg:order-1\" data-testid=\"investor-dashboard-preview\">\n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-semibold text-neutral-800 mb-4\">Investment Portfolio</h3>\n                <div className=\"grid grid-cols-3 gap-4 mb-6\">\n                  <div className=\"text-center p-3 bg-neutral-50 rounded-lg\">\n                    <div className=\"text-xl font-bold text-neutral-800\">$127,500</div>\n                    <div className=\"text-xs text-neutral-600\">Invested</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-secondary/10 rounded-lg\">\n                    <div className=\"text-xl font-bold text-secondary\">$14,325</div>\n                    <div className=\"text-xs text-neutral-600\">Gains</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-primary/10 rounded-lg\">\n                    <div className=\"text-xl font-bold text-primary\">11.2%</div>\n                    <div className=\"text-xs text-neutral-600\">ROI</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"order-1 lg:order-2\">\n              <h2 className=\"text-3xl lg:text-4xl font-bold text-neutral-800 mb-6\" data-testid=\"investor-section-title\">\n                Investor Dashboard\n              </h2>\n              <p className=\"text-xl text-neutral-600 mb-8\">\n                Maximize your returns with our intelligent marketplace and automatic diversification system.\n              </p>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <TrendingUp className=\"text-primary\" />\n                  <span className=\"text-neutral-700\">Detailed performance analytics</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <PieChart className=\"text-primary\" />\n                  <span className=\"text-neutral-700\">Automatic diversification</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <Building className=\"text-primary\" />\n                  <span className=\"text-neutral-700\">Opportunity alerts</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-r from-primary to-blue-600 text-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl lg:text-4xl font-bold mb-6\" data-testid=\"cta-title\">\n            Explore this Technical Demo\n          </h2>\n          <p className=\"text-xl mb-8 text-blue-100\" data-testid=\"cta-description\">\n            Portfolio project demonstrating the implementation of a complete fintech platform.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <a href=\"/api/login\">\n              <Button size=\"lg\" className=\"bg-white text-primary hover:bg-neutral-100 w-full sm:w-auto\" data-testid=\"cta-start-now\">\n                Test the Platform\n              </Button>\n            </a>\n            <a href=\"#tech-stack\">\n              <Button \n                size=\"lg\" \n                variant=\"outline\" \n                className=\"border-2 border-white text-white hover:bg-white hover:text-primary w-full sm:w-auto\"\n                data-testid=\"cta-documentation\"\n              >\n                Tech Stack\n              </Button>\n            </a>\n          </div>\n        </div>\n      </section>\n\n      {/* Technology Stack */}\n      <section id=\"tech-stack\" className=\"py-20 bg-white\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n            <div className=\"bg-neutral-50 p-6 rounded-lg\">\n              <h3 className=\"text-xl font-semibold mb-4 text-neutral-800\">Backend & Database</h3>\n              <div className=\"space-y-2 text-neutral-600\">\n                <p>— Node.js with Express.js</p>\n                <p>— PostgreSQL with Drizzle ORM</p>\n                <p>— OpenID Connect authentication</p>\n                <p>— Secure RESTful API</p>\n              </div>\n            </div>\n            \n            <div className=\"bg-neutral-50 p-6 rounded-lg\">\n              <h3 className=\"text-xl font-semibold mb-4 text-neutral-800\">Financial Algorithms</h3>\n              <div className=\"space-y-2 text-neutral-600\">\n                <p>— Multi-criteria credit scoring</p>\n                <p>— Real-time ROI calculations</p>\n                <p>— Automated risk assessment</p>\n                <p>— Performance metrics</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":15226},"client/src/pages/loan-application.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { Calculator, DollarSign, TrendingUp, AlertCircle } from \"lucide-react\";\nimport { formatCurrency, calculateMonthlyPayment } from \"@/lib/financial-calculations\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nconst loanApplicationSchema = z.object({\n  amount: z.string().min(1, \"Amount required\").refine(\n    (val) => !isNaN(Number(val)) && Number(val) >= 1000 && Number(val) <= 100000,\n    \"Amount between $1,000 and $100,000\"\n  ),\n  purpose: z.string().min(10, \"Project description required (min. 10 characters)\"),\n  duration: z.string().refine((val) => [\"12\", \"24\", \"36\", \"48\", \"60\"].includes(val), \"Invalid duration\"),\n  annualIncome: z.string().min(1, \"Annual income required\").refine(\n    (val) => !isNaN(Number(val)) && Number(val) > 0,\n    \"Invalid income\"\n  ),\n  employmentYears: z.string().refine(\n    (val) => !isNaN(Number(val)) && Number(val) >= 0 && Number(val) <= 50,\n    \"Invalid employment years\"\n  ),\n  currentDebt: z.string().refine(\n    (val) => !isNaN(Number(val)) && Number(val) >= 0,\n    \"Invalid current debt\"\n  ),\n  homeOwnership: z.enum([\"rent\", \"own\", \"mortgage\"]),\n  bankAccount: z.boolean(),\n  creditHistory: z.string().refine(\n    (val) => !isNaN(Number(val)) && Number(val) >= 0 && Number(val) <= 50,\n    \"Invalid credit history\"\n  ),\n  previousLoans: z.string().refine(\n    (val) => !isNaN(Number(val)) && Number(val) >= 0,\n    \"Invalid number of previous loans\"\n  ),\n});\n\ntype LoanApplicationFormData = z.infer<typeof loanApplicationSchema>;\n\nexport default function LoanApplication() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [creditScore, setCreditScore] = useState<{\n    creditScore: number;\n    creditGrade: string;\n    interestRate: string;\n  } | null>(null);\n  const [monthlyPayment, setMonthlyPayment] = useState<number>(0);\n\n  const form = useForm<LoanApplicationFormData>({\n    resolver: zodResolver(loanApplicationSchema),\n    defaultValues: {\n      amount: \"\",\n      purpose: \"\",\n      duration: \"36\",\n      annualIncome: \"\",\n      employmentYears: \"\",\n      currentDebt: \"\",\n      homeOwnership: \"rent\",\n      bankAccount: true,\n      creditHistory: \"\",\n      previousLoans: \"0\",\n    },\n  });\n\n  // Redirect if not authenticated or not a borrower\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || (user && user.userType !== \"borrower\"))) {\n      toast({\n        title: \"Access denied\",\n        description: \"Only borrowers can apply for loans.\",\n        variant: \"destructive\",\n      });\n      setLocation(\"/\");\n    }\n  }, [isAuthenticated, isLoading, user, toast, setLocation]);\n\n  const calculateCreditScoreMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/credit-score\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCreditScore(data);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You must be logged in. Redirecting...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Could not calculate credit score\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createLoanMutation = useMutation({\n    mutationFn: async (data: LoanApplicationFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/loans\", {\n        ...data,\n        amount: data.amount,\n        duration: parseInt(data.duration),\n        annualIncome: data.annualIncome,\n        employmentYears: parseInt(data.employmentYears),\n        currentDebt: data.currentDebt,\n        creditHistory: parseInt(data.creditHistory),\n        previousLoans: parseInt(data.previousLoans),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Application created\",\n        description: \"Your loan application has been submitted successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/loans/my\"] });\n      setLocation(\"/borrower-dashboard\");\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You must be logged in. Redirecting...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Could not create loan application\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Watch form values for real-time credit score calculation\n  const watchedValues = form.watch();\n  \n  useEffect(() => {\n    const { \n      amount, \n      duration, \n      annualIncome, \n      currentDebt, \n      employmentYears, \n      creditHistory, \n      previousLoans, \n      homeOwnership, \n      bankAccount \n    } = watchedValues;\n\n    if (annualIncome && currentDebt && employmentYears && creditHistory) {\n      const debounceTimer = setTimeout(() => {\n        calculateCreditScoreMutation.mutate({\n          annualIncome: parseFloat(annualIncome),\n          currentDebt: parseFloat(currentDebt),\n          employmentYears: parseInt(employmentYears),\n          creditHistory: parseInt(creditHistory),\n          previousLoans: parseInt(previousLoans || \"0\"),\n          homeOwnership,\n          bankAccount,\n        });\n      }, 500);\n\n      return () => clearTimeout(debounceTimer);\n    }\n  }, [watchedValues]);\n\n  // Calculate monthly payment when amount, duration, or interest rate changes\n  useEffect(() => {\n    const { amount, duration } = watchedValues;\n    if (amount && duration && creditScore?.interestRate) {\n      const payment = calculateMonthlyPayment(\n        parseFloat(amount),\n        parseFloat(creditScore.interestRate),\n        parseInt(duration)\n      );\n      setMonthlyPayment(payment);\n    }\n  }, [watchedValues.amount, watchedValues.duration, creditScore?.interestRate]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-neutral-50 p-6 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p>Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !user || user.userType !== \"borrower\") {\n    return null;\n  }\n\n  const onSubmit = (data: LoanApplicationFormData) => {\n    createLoanMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50 p-6\" data-testid=\"loan-application-page\">\n      <div className=\"max-w-4xl mx-auto space-y-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-3xl font-bold text-neutral-800 mb-4\" data-testid=\"page-title\">\n            Loan Application\n          </h1>\n          <p className=\"text-xl text-neutral-600\">\n            Complete the form to get an instant assessment\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2\">\n            <Card data-testid=\"loan-application-form\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <DollarSign className=\"h-5 w-5\" />\n                  Loan Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"amount\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Loan amount ($)</FormLabel>\n                            <FormControl>\n                              <Input \n                                {...field} \n                                type=\"number\" \n                                placeholder=\"25000\"\n                                data-testid=\"input-loan-amount\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"duration\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Duration (months)</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-loan-duration\">\n                                  <SelectValue placeholder=\"Select\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"12\">12 months</SelectItem>\n                                <SelectItem value=\"24\">24 months</SelectItem>\n                                <SelectItem value=\"36\">36 months</SelectItem>\n                                <SelectItem value=\"48\">48 months</SelectItem>\n                                <SelectItem value=\"60\">60 months</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"purpose\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Loan purpose</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              {...field} \n                              placeholder=\"Describe intended use of funds...\"\n                              className=\"min-h-[100px]\"\n                              data-testid=\"textarea-loan-purpose\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"border-t pt-6\">\n                      <h3 className=\"text-lg font-semibold text-neutral-800 mb-4 flex items-center gap-2\">\n                        <Calculator className=\"h-5 w-5\" />\n                        Financial Information\n                      </h3>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"annualIncome\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Annual income ($)</FormLabel>\n                              <FormControl>\n                                <Input \n                                  {...field} \n                                  type=\"number\" \n                                  placeholder=\"45000\"\n                                  data-testid=\"input-annual-income\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"currentDebt\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Current monthly debt ($)</FormLabel>\n                              <FormControl>\n                                <Input \n                                  {...field} \n                                  type=\"number\" \n                                  placeholder=\"800\"\n                                  data-testid=\"input-current-debt\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"employmentYears\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Years at current job</FormLabel>\n                              <FormControl>\n                                <Input \n                                  {...field} \n                                  type=\"number\" \n                                  placeholder=\"3\"\n                                  data-testid=\"input-employment-years\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"creditHistory\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Credit history years</FormLabel>\n                              <FormControl>\n                                <Input \n                                  {...field} \n                                  type=\"number\" \n                                  placeholder=\"5\"\n                                  data-testid=\"input-credit-history\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"homeOwnership\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Housing status</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-home-ownership\">\n                                    <SelectValue placeholder=\"Select\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"rent\">Tenant</SelectItem>\n                                  <SelectItem value=\"own\">Owner</SelectItem>\n                                  <SelectItem value=\"mortgage\">Mortgage</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"previousLoans\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Previous loans repaid</FormLabel>\n                              <FormControl>\n                                <Input \n                                  {...field} \n                                  type=\"number\" \n                                  placeholder=\"2\"\n                                  data-testid=\"input-previous-loans\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"bankAccount\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 mt-4\">\n                            <FormControl>\n                              <Checkbox\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid=\"checkbox-bank-account\"\n                              />\n                            </FormControl>\n                            <div className=\"space-y-1 leading-none\">\n                              <FormLabel>\n                                I have a bank account\n                              </FormLabel>\n                            </div>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      disabled={createLoanMutation.isPending}\n                      data-testid=\"submit-loan-application\"\n                    >\n                      {createLoanMutation.isPending ? \"Creating...\" : \"Submit my application\"}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"space-y-6\">\n            {/* Credit Score Card */}\n            <Card data-testid=\"credit-score-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5\" />\n                  Instant Evaluation\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {creditScore ? (\n                  <div className=\"space-y-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"credit-score-value\">\n                        {creditScore.creditScore}\n                      </div>\n                      <div className={`text-sm px-3 py-1 rounded-full font-medium inline-block mb-2 ${\n                        creditScore.creditGrade === 'A' ? 'bg-secondary text-white' :\n                        creditScore.creditGrade === 'B' ? 'bg-primary text-white' :\n                        'bg-yellow-500 text-white'\n                      }`} data-testid=\"credit-grade\">\n                        Grade {creditScore.creditGrade}\n                      </div>\n                      <p className=\"text-sm text-neutral-600\">Credit Score</p>\n                    </div>\n                    \n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-neutral-600\">Estimated Interest Rate</span>\n                        <span className=\"font-semibold text-secondary\" data-testid=\"interest-rate\">\n                          {creditScore.interestRate}%\n                        </span>\n                      </div>\n                      \n                      {monthlyPayment > 0 && (\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-neutral-600\">Estimated Monthly Payment</span>\n                          <span className=\"font-semibold text-neutral-800\" data-testid=\"monthly-payment\">\n                            {formatCurrency(monthlyPayment)}\n                          </span>\n                        </div>\n                      )}\n\n                      {watchedValues.duration && (\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-neutral-600\">Duration</span>\n                          <span className=\"font-semibold text-neutral-800\">\n                            {watchedValues.duration} months\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-6 text-neutral-500\" data-testid=\"credit-score-placeholder\">\n                    <Calculator className=\"h-12 w-12 mx-auto mb-4 text-neutral-300\" />\n                    <p className=\"text-sm\">Complete the financial information to see your evaluation</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Tips Card */}\n            <Card data-testid=\"tips-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <AlertCircle className=\"h-5 w-5\" />\n                  Tips\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"text-sm text-neutral-600\">\n                  <p className=\"font-medium mb-2\">To improve your score:</p>\n                  <ul className=\"space-y-1 text-xs\">\n                    <li>• Reduce your debt-to-income ratio</li>\n                    <li>• Maintain a positive credit history</li>\n                    <li>• Employment stability is important</li>\n                    <li>• Valued real estate property</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":22881},"client/src/pages/marketplace.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Search, \n  Filter, \n  TrendingUp, \n  DollarSign, \n  Clock,\n  Users,\n  Target,\n  ArrowUpRight\n} from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/financial-calculations\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Marketplace() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [gradeFilter, setGradeFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"created\");\n  const [selectedLoan, setSelectedLoan] = useState<any>(null);\n  const [investmentAmount, setInvestmentAmount] = useState(\"\");\n\n  const { data: marketplaceLoans, isLoading } = useQuery({\n    queryKey: [\"/api/loans/marketplace\"],\n  });\n\n  const investMutation = useMutation({\n    mutationFn: async (data: { loanId: string; amount: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/investments\", {\n        loanId: data.loanId,\n        amount: data.amount,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Investment successful\",\n        description: \"Your investment has been created successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/loans/marketplace\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/investments/my\"] });\n      setSelectedLoan(null);\n      setInvestmentAmount(\"\");\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You must be logged in. Redirecting...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      const errorMessage = error.message.includes(\"exceeds remaining funding\") \n        ? \"Amount exceeds remaining funding needed\"\n        : \"Unable to create investment\";\n      \n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getGradeBadgeColor = (grade: string) => {\n    switch (grade) {\n      case \"A\":\n        return \"bg-secondary text-white\";\n      case \"B\":\n        return \"bg-primary text-white\";\n      case \"C\":\n        return \"bg-yellow-500 text-white\";\n      case \"D\":\n        return \"bg-orange-500 text-white\";\n      case \"E\":\n        return \"bg-red-500 text-white\";\n      default:\n        return \"bg-neutral-500 text-white\";\n    }\n  };\n\n  const getGradeDescription = (grade: string) => {\n    switch (grade) {\n      case \"A\":\n        return \"Very low risk - Excellent borrower\";\n      case \"B\":\n        return \"Moderate risk - Good borrower\";\n      case \"C\":\n        return \"High risk - Fair borrower\";\n      case \"D\":\n        return \"Very high risk - Risky borrower\";\n      case \"E\":\n        return \"Critical risk - High-risk borrower\";\n      default:\n        return \"Grade not defined\";\n    }\n  };\n\n  // Filter and sort loans\n  const filteredLoans = marketplaceLoans?.filter((loan) => {\n    const matchesSearch = loan.purpose.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         loan.borrower.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         loan.borrower.lastName.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesGrade = gradeFilter === \"all\" || loan.creditGrade === gradeFilter;\n    return matchesSearch && matchesGrade;\n  }).sort((a, b) => {\n    switch (sortBy) {\n      case \"amount\":\n        return parseFloat(b.amount) - parseFloat(a.amount);\n      case \"rate\":\n        return parseFloat(b.interestRate || \"0\") - parseFloat(a.interestRate || \"0\");\n      case \"grade\":\n        return (a.creditGrade || \"Z\").localeCompare(b.creditGrade || \"Z\");\n      case \"funding\":\n        return b.fundingPercentage - a.fundingPercentage;\n      default:\n        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n    }\n  }) || [];\n\n  const handleInvest = (loan: any) => {\n    if (user?.userType !== \"investor\") {\n      toast({\n        title: \"Access denied\",\n        description: \"Only investors can invest\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setSelectedLoan(loan);\n  };\n\n  const confirmInvestment = () => {\n    if (!selectedLoan || !investmentAmount) return;\n    \n    const amount = parseFloat(investmentAmount);\n    const remainingAmount = parseFloat(selectedLoan.amount) - parseFloat(selectedLoan.totalFunded || \"0\");\n    \n    if (amount > remainingAmount) {\n      toast({\n        title: \"Invalid amount\",\n        description: `Maximum amount is ${formatCurrency(remainingAmount)}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (amount < 100) {\n      toast({\n        title: \"Amount too low\",\n        description: \"Minimum investment is $100\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    investMutation.mutate({\n      loanId: selectedLoan.id,\n      amount: investmentAmount,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50 p-6\" data-testid=\"marketplace-page\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <h1 className=\"text-3xl font-bold text-neutral-800 mb-4\" data-testid=\"marketplace-title\">\n            Investment Marketplace\n          </h1>\n          <p className=\"text-xl text-neutral-600\">\n            Discover investment opportunities and diversify your portfolio\n          </p>\n        </div>\n\n        {/* Filters and Search */}\n        <Card data-testid=\"filters-card\">\n          <CardContent className=\"pt-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-neutral-400 h-4 w-4\" />\n                <Input\n                  placeholder=\"Search for loans...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"search-input\"\n                />\n              </div>\n              \n              <Select value={gradeFilter} onValueChange={setGradeFilter}>\n                <SelectTrigger data-testid=\"grade-filter\">\n                  <SelectValue placeholder=\"Filter by grade\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All grades</SelectItem>\n                  <SelectItem value=\"A\">Grade A</SelectItem>\n                  <SelectItem value=\"B\">Grade B</SelectItem>\n                  <SelectItem value=\"C\">Grade C</SelectItem>\n                  <SelectItem value=\"D\">Grade D</SelectItem>\n                  <SelectItem value=\"E\">Grade E</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger data-testid=\"sort-select\">\n                  <SelectValue placeholder=\"Sort by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"created\">Most recent</SelectItem>\n                  <SelectItem value=\"amount\">Amount descending</SelectItem>\n                  <SelectItem value=\"rate\">Rate descending</SelectItem>\n                  <SelectItem value=\"grade\">Grade (A to E)</SelectItem>\n                  <SelectItem value=\"funding\">Funding descending</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <div className=\"flex items-center gap-2\">\n                <Filter className=\"h-4 w-4 text-neutral-400\" />\n                <span className=\"text-sm text-neutral-600\">\n                  {filteredLoans.length} opportunit{filteredLoans.length !== 1 ? 'ies' : 'y'}\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Marketplace Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"text-center\">\n            <CardContent className=\"pt-6\">\n              <TrendingUp className=\"h-8 w-8 mx-auto mb-2 text-primary\" />\n              <div className=\"text-2xl font-bold text-neutral-800\">\n                {marketplaceLoans?.length || 0}\n              </div>\n              <div className=\"text-sm text-neutral-600\">Available opportunities</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"text-center\">\n            <CardContent className=\"pt-6\">\n              <DollarSign className=\"h-8 w-8 mx-auto mb-2 text-secondary\" />\n              <div className=\"text-2xl font-bold text-neutral-800\">\n                {formatCurrency(\n                  marketplaceLoans?.reduce((sum, loan) => sum + parseFloat(loan.amount), 0) || 0\n                )}\n              </div>\n              <div className=\"text-sm text-neutral-600\">Total volume</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"text-center\">\n            <CardContent className=\"pt-6\">\n              <Target className=\"h-8 w-8 mx-auto mb-2 text-primary\" />\n              <div className=\"text-2xl font-bold text-neutral-800\">\n                {marketplaceLoans?.length \n                  ? (marketplaceLoans.reduce((sum, loan) => sum + parseFloat(loan.interestRate || \"0\"), 0) / marketplaceLoans.length).toFixed(1)\n                  : \"0\"\n                }%\n              </div>\n              <div className=\"text-sm text-neutral-600\">Average rate</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"text-center\">\n            <CardContent className=\"pt-6\">\n              <Users className=\"h-8 w-8 mx-auto mb-2 text-secondary\" />\n              <div className=\"text-2xl font-bold text-neutral-800\">\n                {marketplaceLoans?.reduce((sum, loan) => sum + loan.investments.length, 0) || 0}\n              </div>\n              <div className=\"text-sm text-neutral-600\">Active investments</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Loans Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {isLoading ? (\n            [...Array(6)].map((_, i) => (\n              <Skeleton key={i} className=\"h-64\" />\n            ))\n          ) : filteredLoans.length > 0 ? (\n            filteredLoans.map((loan) => {\n              const remainingAmount = parseFloat(loan.amount) - parseFloat(loan.totalFunded || \"0\");\n              \n              return (\n                <Card \n                  key={loan.id} \n                  className=\"hover:shadow-lg transition-shadow duration-300\"\n                  data-testid={`loan-card-${loan.id}`}\n                >\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className={`text-xs px-2 py-1 rounded font-medium ${getGradeBadgeColor(loan.creditGrade || \"E\")}`}>\n                        Grade {loan.creditGrade || \"E\"}\n                      </span>\n                      <div className=\"text-right\">\n                        <div className=\"text-lg font-bold text-secondary\">\n                          {loan.interestRate}%\n                        </div>\n                        <div className=\"text-xs text-neutral-500\">Annual rate</div>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <h3 className=\"font-semibold text-neutral-800 mb-2\">\n                        {formatCurrency(loan.amount)}\n                      </h3>\n                      <p className=\"text-sm text-neutral-600 line-clamp-2\">\n                        {loan.purpose}\n                      </p>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-neutral-500\">Duration</span>\n                        <div className=\"font-medium\">{loan.duration} months</div>\n                      </div>\n                      <div>\n                        <span className=\"text-neutral-500\">Score</span>\n                        <div className=\"font-medium\">{loan.creditScore}</div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <span className=\"text-sm text-neutral-500\">Funding</span>\n                        <span className=\"text-sm font-medium\">\n                          {loan.fundingPercentage.toFixed(1)}%\n                        </span>\n                      </div>\n                      <Progress value={loan.fundingPercentage} className=\"h-2 mb-2\" />\n                      <div className=\"flex justify-between text-xs text-neutral-500\">\n                        <span>Funded: {formatCurrency(loan.totalFunded || \"0\")}</span>\n                        <span>Remaining: {formatCurrency(remainingAmount)}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"bg-neutral-50 p-3 rounded-lg\">\n                      <div className=\"text-xs text-neutral-600 mb-1\">\n                        Risk: {getGradeDescription(loan.creditGrade || \"E\")}\n                      </div>\n                      <div className=\"text-xs text-neutral-500\">\n                        Borrower: {loan.borrower.firstName} {loan.borrower.lastName?.[0]}.\n                      </div>\n                    </div>\n\n                    <div className=\"flex gap-2\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        className=\"flex-1\"\n                        data-testid={`view-details-${loan.id}`}\n                      >\n                        Details\n                      </Button>\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button \n                            size=\"sm\" \n                            className=\"flex-1\"\n                            onClick={() => handleInvest(loan)}\n                            disabled={loan.fundingPercentage >= 100 || user?.userType !== \"investor\"}\n                            data-testid={`invest-button-${loan.id}`}\n                          >\n                            <ArrowUpRight className=\"h-4 w-4 mr-1\" />\n                            Invest\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent data-testid=\"investment-dialog\">\n                          <DialogHeader>\n                            <DialogTitle>Invest in this loan</DialogTitle>\n                            <DialogDescription>\n                              You are about to invest in a grade {selectedLoan?.creditGrade} loan with an interest rate of {selectedLoan?.interestRate}%.\n                            </DialogDescription>\n                          </DialogHeader>\n                          \n                          {selectedLoan && (\n                            <div className=\"space-y-4\">\n                              <div className=\"bg-neutral-50 p-4 rounded-lg\">\n                                <h4 className=\"font-medium mb-2\">Loan details</h4>\n                                <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                                  <div>Total amount: {formatCurrency(selectedLoan.amount)}</div>\n                                  <div>Duration: {selectedLoan.duration} months</div>\n                                  <div>Already funded: {formatCurrency(selectedLoan.totalFunded || \"0\")}</div>\n                                  <div>Remaining to fund: {formatCurrency(remainingAmount)}</div>\n                                </div>\n                              </div>\n                              \n                              <div>\n                                <Label htmlFor=\"investment-amount\">Amount to invest ($)</Label>\n                                <Input\n                                  id=\"investment-amount\"\n                                  type=\"number\"\n                                  min=\"100\"\n                                  max={remainingAmount}\n                                  value={investmentAmount}\n                                  onChange={(e) => setInvestmentAmount(e.target.value)}\n                                  placeholder={`Min: $100 - Max: ${formatCurrency(remainingAmount)}`}\n                                  data-testid=\"investment-amount-input\"\n                                />\n                              </div>\n                              \n                              {investmentAmount && parseFloat(investmentAmount) >= 100 && (\n                                <div className=\"bg-secondary/10 p-3 rounded-lg\">\n                                  <div className=\"text-sm\">\n                                    <div>Gain estimé: {formatCurrency(\n                                      (parseFloat(investmentAmount) * parseFloat(selectedLoan.interestRate || \"0\") / 100 * selectedLoan.duration / 12).toString()\n                                    )}</div>\n                                    <div>Total attendu: {formatCurrency(\n                                      (parseFloat(investmentAmount) * (1 + parseFloat(selectedLoan.interestRate || \"0\") / 100 * selectedLoan.duration / 12)).toString()\n                                    )}</div>\n                                  </div>\n                                </div>\n                              )}\n                            </div>\n                          )}\n                          \n                          <DialogFooter>\n                            <Button \n                              variant=\"outline\" \n                              onClick={() => {\n                                setSelectedLoan(null);\n                                setInvestmentAmount(\"\");\n                              }}\n                            >\n                              Annuler\n                            </Button>\n                            <Button \n                              onClick={confirmInvestment}\n                              disabled={!investmentAmount || parseFloat(investmentAmount) < 100 || investMutation.isPending}\n                              data-testid=\"confirm-investment\"\n                            >\n                              {investMutation.isPending ? \"Investissement...\" : \"Confirmer l'investissement\"}\n                            </Button>\n                          </DialogFooter>\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })\n          ) : (\n            <div className=\"col-span-full text-center py-12\" data-testid=\"no-loans-message\">\n              <Target className=\"h-16 w-16 mx-auto mb-4 text-neutral-300\" />\n              <h3 className=\"text-lg font-medium text-neutral-700 mb-2\">\n                No opportunities found\n              </h3>\n              <p className=\"text-neutral-500\">\n                Adjust your filters to see more investment opportunities\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20318},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  User, \n  Mail, \n  Shield,\n  Calendar,\n  Edit,\n  Save\n} from \"lucide-react\";\n\nexport default function Profile() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You must be logged in. Redirecting...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !user) {\n    return (\n      <div className=\"min-h-screen bg-neutral-50 p-6\">\n        <div className=\"max-w-4xl mx-auto space-y-6\">\n          <Skeleton className=\"h-12 w-64\" />\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Skeleton className=\"h-64\" />\n            <Skeleton className=\"h-64\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const getUserTypeDisplay = (userType: string) => {\n    switch (userType) {\n      case \"borrower\":\n        return { label: \"Borrower\", color: \"bg-blue-100 text-blue-800\" };\n      case \"investor\":\n        return { label: \"Investor\", color: \"bg-green-100 text-green-800\" };\n      case \"admin\":\n        return { label: \"Administrator\", color: \"bg-purple-100 text-purple-800\" };\n      default:\n        return { label: \"User\", color: \"bg-gray-100 text-gray-800\" };\n    }\n  };\n\n  const userTypeInfo = getUserTypeDisplay(user.userType || \"\");\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50 p-6\" data-testid=\"profile-page\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-neutral-800 mb-2\" data-testid=\"profile-title\">\n            My Profile\n          </h1>\n          <p className=\"text-neutral-600\">\n            Manage your personal information and preferences\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Personal Information */}\n          <Card data-testid=\"profile-info-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <User className=\"h-5 w-5\" />\n                <span>Personal Information</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center space-x-4\">\n                {user.profileImageUrl ? (\n                  <img\n                    src={user.profileImageUrl}\n                    alt=\"Profile photo\"\n                    className=\"w-16 h-16 rounded-full object-cover border-2 border-neutral-200\"\n                    data-testid=\"profile-avatar\"\n                  />\n                ) : (\n                  <div className=\"w-16 h-16 rounded-full bg-neutral-200 flex items-center justify-center\">\n                    <User className=\"h-8 w-8 text-neutral-500\" />\n                  </div>\n                )}\n                <div>\n                  <h3 className=\"text-lg font-semibold text-neutral-800\" data-testid=\"profile-name\">\n                    {user.firstName} {user.lastName}\n                  </h3>\n                  <Badge className={userTypeInfo.color} data-testid=\"profile-user-type\">\n                    {userTypeInfo.label}\n                  </Badge>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <Input\n                    id=\"firstName\"\n                    value={user.firstName || \"\"}\n                    readOnly\n                    className=\"bg-neutral-50\"\n                    data-testid=\"input-first-name\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <Input\n                    id=\"lastName\"\n                    value={user.lastName || \"\"}\n                    readOnly\n                    className=\"bg-neutral-50\"\n                    data-testid=\"input-last-name\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"email\" className=\"flex items-center space-x-2\">\n                    <Mail className=\"h-4 w-4\" />\n                    <span>Email</span>\n                  </Label>\n                  <Input\n                    id=\"email\"\n                    value={user.email || \"\"}\n                    readOnly\n                    className=\"bg-neutral-50\"\n                    data-testid=\"input-email\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t border-neutral-200\">\n                <p className=\"text-sm text-neutral-500 text-center\">\n                  Profile information is managed through your authentication provider\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Account Information */}\n          <Card data-testid=\"account-info-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Shield className=\"h-5 w-5\" />\n                <span>Account Information</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label className=\"flex items-center space-x-2 mb-2\">\n                  <Calendar className=\"h-4 w-4\" />\n                  <span>Member since</span>\n                </Label>\n                <p className=\"text-neutral-700\" data-testid=\"member-since\">\n                  {user.createdAt ? new Date(user.createdAt).toLocaleDateString('fr-FR', {\n                    year: 'numeric',\n                    month: 'long',\n                    day: 'numeric'\n                  }) : \"Unknown date\"}\n                </p>\n              </div>\n\n              <div>\n                <Label>Unique ID</Label>\n                <p className=\"text-sm text-neutral-600 font-mono bg-neutral-50 p-2 rounded border\" data-testid=\"user-id\">\n                  {user.id}\n                </p>\n              </div>\n\n              <div>\n                <Label>Account Type</Label>\n                <div className=\"mt-2\">\n                  <Badge className={userTypeInfo.color} data-testid=\"account-type-badge\">\n                    {userTypeInfo.label}\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-neutral-600 mt-1\">\n                  {user.userType === \"borrower\" && \"You can request loans and manage your borrowings.\"}\n                  {user.userType === \"investor\" && \"You can invest in loans and manage your portfolio.\"}\n                  {user.userType === \"admin\" && \"You have access to all administration tools.\"}\n                </p>\n              </div>\n\n              <div className=\"pt-4 border-t border-neutral-200 space-y-2\">\n                <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-security\">\n                  <Shield className=\"h-4 w-4 mr-2\" />\n                  Security Settings\n                </Button>\n                \n                <Button \n                  variant=\"destructive\" \n                  className=\"w-full\"\n                  onClick={async () => {\n                    try {\n                      await fetch('/api/logout', { method: 'POST', credentials: 'include' });\n                      window.location.href = '/auth';\n                    } catch (error) {\n                      console.error('Logout failed:', error);\n                      window.location.href = '/auth';\n                    }\n                  }}\n                  data-testid=\"button-logout\"\n                >\n                  Log Out\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8500},"client/src/pages/settings.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Settings as SettingsIcon, \n  Bell, \n  Palette,\n  Save,\n  RefreshCcw\n} from \"lucide-react\";\n\nexport default function Settings() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You must be logged in. Redirecting...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !user) {\n    return (\n      <div className=\"min-h-screen bg-neutral-50 p-6\">\n        <div className=\"max-w-4xl mx-auto space-y-6\">\n          <Skeleton className=\"h-12 w-64\" />\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Skeleton className=\"h-64\" />\n            <Skeleton className=\"h-64\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const handleSaveSettings = () => {\n    toast({\n      title: \"Settings saved\",\n      description: \"Your preferences have been successfully updated.\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50 p-6\" data-testid=\"settings-page\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-neutral-800 mb-2\" data-testid=\"settings-title\">\n            Settings\n          </h1>\n          <p className=\"text-neutral-600\">\n            Configure your notification preferences\n          </p>\n        </div>\n\n        <div className=\"max-w-2xl mx-auto\">\n          {/* Notification Settings */}\n          <Card data-testid=\"notifications-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Bell className=\"h-5 w-5\" />\n                <span>Notifications</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label>Email notifications</Label>\n                  <p className=\"text-sm text-neutral-600\">\n                    Receive email updates about your account\n                  </p>\n                </div>\n                <Switch defaultChecked data-testid=\"switch-email-notifications\" />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label>Loan alerts</Label>\n                  <p className=\"text-sm text-neutral-600\">\n                    Notifications when new loans become available\n                  </p>\n                </div>\n                <Switch defaultChecked data-testid=\"switch-loan-alerts\" />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label>Investment alerts</Label>\n                  <p className=\"text-sm text-neutral-600\">\n                    Alerts for new investment opportunities\n                  </p>\n                </div>\n                <Switch defaultChecked data-testid=\"switch-investment-alerts\" />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label>Payment reminders</Label>\n                  <p className=\"text-sm text-neutral-600\">\n                    Reminders for upcoming payment due dates\n                  </p>\n                </div>\n                <Switch defaultChecked data-testid=\"switch-payment-reminders\" />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label>Security alerts</Label>\n                  <p className=\"text-sm text-neutral-600\">\n                    Important security and account notifications\n                  </p>\n                </div>\n                <Switch defaultChecked data-testid=\"switch-security-alerts\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"mt-8 max-w-2xl mx-auto flex justify-end space-x-4\">\n          <Button variant=\"outline\" data-testid=\"button-reset\">\n            <RefreshCcw className=\"h-4 w-4 mr-2\" />\n            Reset to defaults\n          </Button>\n          <Button onClick={handleSaveSettings} data-testid=\"button-save\">\n            <Save className=\"h-4 w-4 mr-2\" />\n            Save preferences\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5249},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart-card.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ChartCardProps {\n  title: string;\n  children: React.ReactNode;\n  className?: string;\n  description?: string;\n}\n\nexport function ChartCard({ title, children, className, description }: ChartCardProps) {\n  return (\n    <Card className={cn(\"\", className)} data-testid={`chart-card-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold text-neutral-800\">\n          {title}\n        </CardTitle>\n        {description && (\n          <p className=\"text-sm text-neutral-600\" data-testid={`chart-description-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n            {description}\n          </p>\n        )}\n      </CardHeader>\n      <CardContent>\n        {children}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":885},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/metric-card.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\n\ninterface MetricCardProps {\n  title: string;\n  value: string | number;\n  change?: string;\n  changeType?: \"positive\" | \"negative\" | \"neutral\";\n  description?: string;\n  icon?: React.ReactNode;\n  className?: string;\n}\n\nexport function MetricCard({\n  title,\n  value,\n  change,\n  changeType = \"neutral\",\n  description,\n  icon,\n  className\n}: MetricCardProps) {\n  return (\n    <Card className={cn(\"\", className)} data-testid={`metric-card-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium text-neutral-600\">\n          {title}\n        </CardTitle>\n        {icon && (\n          <div className=\"text-neutral-400\">\n            {icon}\n          </div>\n        )}\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold text-neutral-800\" data-testid={`metric-value-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n          {value}\n        </div>\n        {change && (\n          <div className={cn(\n            \"text-xs mt-1 flex items-center\",\n            changeType === \"positive\" && \"text-secondary\",\n            changeType === \"negative\" && \"text-danger\", \n            changeType === \"neutral\" && \"text-neutral-500\"\n          )} data-testid={`metric-change-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n            {changeType === \"positive\" && <span className=\"mr-1\">↗</span>}\n            {changeType === \"negative\" && <span className=\"mr-1\">↘</span>}\n            {change}\n          </div>\n        )}\n        {description && (\n          <p className=\"text-xs text-neutral-500 mt-1\" data-testid={`metric-description-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n            {description}\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1929},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/auth-page.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Redirect } from \"wouter\";\nimport { Loader2, Shield, TrendingUp, Users } from \"lucide-react\";\n\nconst simpleAuthSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  userType: z.enum([\"borrower\", \"investor\"], {\n    required_error: \"Please select your role\",\n  }),\n});\n\ntype SimpleAuthData = z.infer<typeof simpleAuthSchema>;\n\nexport default function AuthPage() {\n  const { toast } = useToast();\n  const { user, isLoading } = useAuth();\n\n  const authForm = useForm<SimpleAuthData>({\n    resolver: zodResolver(simpleAuthSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      userType: \"borrower\",\n    },\n  });\n\n  const authMutation = useMutation({\n    mutationFn: async (data: SimpleAuthData) => {\n      const res = await apiRequest(\"POST\", \"/api/simple-auth\", data);\n      return await res.json();\n    },\n    onSuccess: (user) => {\n      queryClient.setQueryData([\"/api/auth/user\"], user);\n      toast({\n        title: \"Welcome to FinScoreX!\",\n        description: `Successfully joined as ${user.userType}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Join failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Redirect if already logged in\n  if (user && !isLoading) {\n    return <Redirect to=\"/\" />;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  const onAuthSubmit = (data: SimpleAuthData) => {\n    authMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-neutral-50 to-neutral-100\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid lg:grid-cols-2 gap-8 items-center min-h-[calc(100vh-4rem)]\">\n          {/* Hero Section */}\n          <div className=\"space-y-8\">\n            <div className=\"space-y-4\">\n              <h1 className=\"text-4xl lg:text-5xl font-bold text-neutral-900\">\n                Welcome to <span className=\"text-primary\">FinScoreX</span>\n              </h1>\n              <p className=\"text-xl text-neutral-600\">\n                The intelligent peer-to-peer lending platform that connects borrowers with investors.\n              </p>\n            </div>\n\n            <div className=\"grid gap-6\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"p-2 bg-primary/10 rounded-lg\">\n                  <TrendingUp className=\"h-6 w-6 text-primary\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-neutral-900\">Smart Credit Scoring</h3>\n                  <p className=\"text-neutral-600\">\n                    Advanced algorithms analyze your financial profile for instant credit evaluation.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"p-2 bg-secondary/10 rounded-lg\">\n                  <Users className=\"h-6 w-6 text-secondary\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-neutral-900\">Investment Opportunities</h3>\n                  <p className=\"text-neutral-600\">\n                    Diversify your portfolio with carefully vetted loan investments.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"p-2 bg-neutral-200 rounded-lg\">\n                  <Shield className=\"h-6 w-6 text-neutral-700\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-neutral-900\">Secure & Transparent</h3>\n                  <p className=\"text-neutral-600\">\n                    Bank-level security with complete transparency throughout the lending process.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Simple Auth Form */}\n          <div className=\"w-full max-w-md mx-auto\">\n            <Card>\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-2xl\">\n                  Join FinScoreX\n                </CardTitle>\n                <p className=\"text-neutral-600\">\n                  Enter your details to get started\n                </p>\n              </CardHeader>\n              <CardContent>\n                <Form {...authForm}>\n                  <form onSubmit={authForm.handleSubmit(onAuthSubmit)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={authForm.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>First Name</FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"John\" data-testid=\"input-firstname\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={authForm.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Last Name</FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"Doe\" data-testid=\"input-lastname\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={authForm.control}\n                      name=\"userType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>I want to</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-usertype\">\n                                <SelectValue placeholder=\"Select your role\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"borrower\">Borrow Money</SelectItem>\n                              <SelectItem value=\"investor\">Invest Money</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={authMutation.isPending}\n                      data-testid=\"button-join\"\n                    >\n                      {authMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Joining...\n                        </>\n                      ) : (\n                        \"Join FinScoreX\"\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8424},"server/auth.ts":{"content":"import jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nimport { Express, RequestHandler } from \"express\";\nimport session from \"express-session\";\nimport { storage } from \"./storage\";\nimport type { User } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: User;\n    }\n  }\n}\n\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId: string;\n    token: string;\n    userData: any;\n  }\n}\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"finscorex-dev-secret-key\";\nconst SESSION_SECRET = process.env.SESSION_SECRET || \"finscorex-session-secret\";\n\nexport function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  \n  // Session middleware\n  app.use(session({\n    secret: SESSION_SECRET,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 1 week\n    },\n  }));\n\n  // Simple auth endpoint (demo mode)\n  app.post(\"/api/simple-auth\", async (req, res) => {\n    try {\n      const { firstName, lastName, userType } = req.body;\n      \n      if (!firstName || !lastName || !userType) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      // Create user in database\n      const user = await storage.createUser({\n        firstName,\n        lastName,\n        userType,\n        profileImageUrl: null,\n      });\n\n      // Store in session\n      req.session.userId = user.id;\n      req.session.token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: \"7d\" });\n      req.session.userData = user; // Store complete user data\n\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ error: \"Failed to create user\" });\n    }\n  });\n\n  // Register endpoint (disabled in demo mode)\n  app.post(\"/api/register\", async (req, res) => {\n    res.status(501).json({ message: \"Registration disabled in demo mode. Use simple auth instead.\" });\n  });\n\n  // Login endpoint (disabled in demo mode)\n  app.post(\"/api/login\", async (req, res) => {\n    res.status(501).json({ message: \"Login disabled in demo mode. Use simple auth instead.\" });\n  });\n\n  // Logout endpoint\n  app.post(\"/api/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Failed to logout\" });\n      }\n      res.clearCookie(\"connect.sid\");\n      res.status(200).json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // Get current user endpoint (simple auth mode)  \n  app.get(\"/api/auth/user\", (req, res) => {\n    const token = req.session.token;\n    const userId = req.session.userId;\n    const userData = req.session.userData; // Store user data in session\n\n    if (!token || !userId || !userData) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    // Verify JWT token\n    try {\n      jwt.verify(token, JWT_SECRET);\n      res.json(userData);\n    } catch (error) {\n      return res.status(401).json({ message: \"Invalid token\" });\n    }\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  try {\n    const token = req.session.token;\n    const userId = req.session.userId;\n\n    if (!token || !userId) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    // Verify JWT\n    try {\n      jwt.verify(token, JWT_SECRET);\n    } catch (error) {\n      return res.status(401).json({ message: \"Invalid token\" });\n    }\n\n    // Get user from database\n    const user = await storage.getUser(userId);\n    if (!user) {\n      return res.status(401).json({ message: \"User not found\" });\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    console.error(\"Authentication error:\", error);\n    res.status(401).json({ message: \"Unauthorized\" });\n  }\n};","size_bytes":3849},"server/routes-simple.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth } from \"./auth\";\nimport { insertLoanSchema, insertInvestmentSchema } from \"@shared/schema\";\n\n// Credit scoring algorithm\nfunction calculateCreditScore(params: {\n  annualIncome: number;\n  currentDebt: number;\n  employmentYears: number;\n  creditHistory: number;\n  previousLoans: number;\n  homeOwnership: string;\n  bankAccount: boolean;\n}) {\n  const {\n    annualIncome,\n    currentDebt,\n    employmentYears,\n    creditHistory,\n    previousLoans,\n    homeOwnership,\n    bankAccount,\n  } = params;\n\n  let score = 300; // Base score\n\n  // Income factor (35% weight)\n  const debtToIncomeRatio = currentDebt / annualIncome;\n  if (debtToIncomeRatio < 0.1) score += 200;\n  else if (debtToIncomeRatio < 0.3) score += 150;\n  else if (debtToIncomeRatio < 0.5) score += 100;\n  else score += 50;\n\n  // Credit history (25% weight)\n  score += Math.min(creditHistory * 15, 150);\n\n  // Employment stability (20% weight)\n  score += Math.min(employmentYears * 10, 100);\n\n  // Home ownership (10% weight)\n  if (homeOwnership === \"own\") score += 50;\n  else if (homeOwnership === \"mortgage\") score += 30;\n\n  // Bank account (5% weight)\n  if (bankAccount) score += 25;\n\n  // Previous loans penalty (5% weight)\n  score -= previousLoans * 10;\n\n  return Math.min(Math.max(score, 300), 850);\n}\n\nfunction calculateInterestRate(creditScore: number): number {\n  if (creditScore >= 750) return 3.5;\n  if (creditScore >= 650) return 6.5;\n  if (creditScore >= 550) return 12.5;\n  if (creditScore >= 450) return 18.5;\n  return 24.9;\n}\n\nfunction calculateMonthlyPayment(principal: number, annualRate: number, termInMonths: number): number {\n  const monthlyRate = annualRate / 100 / 12;\n  const payment = principal * (monthlyRate * Math.pow(1 + monthlyRate, termInMonths)) /\n    (Math.pow(1 + monthlyRate, termInMonths) - 1);\n  return payment;\n}\n\n// Middleware pour l'authentification simple (demo mode)\nfunction simpleAuthMiddleware(req: any, res: any, next: any) {\n  // En mode démo, on utilise l'ID utilisateur de la session\n  const userId = req.session?.userId;\n  const userData = req.session?.userData;\n  \n  if (userId && userData) {\n    req.user = { id: userId, userType: userData.userType };\n  } else {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  next();\n}\n\nexport function registerRoutes(app: Express): Server {\n  // Setup real authentication with simple auth system\n  setupAuth(app);\n\n  // Test route\n  app.get(\"/api/test-auth\", (req, res) => {\n    res.json({ \n      message: \"FinScoreX P2P Platform - Demo Mode\",\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || \"development\",\n      mode: \"no-auth-demo\"\n    });\n  });\n\n  // Loan routes (requires session)\n  app.post(\"/api/loans\", async (req, res) => {\n    try {\n      if (!req.session?.userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const loanData = insertLoanSchema.parse({\n        ...req.body,\n        borrowerId: req.session.userId,\n      });\n\n      // Calculate credit score and interest rate\n      const creditScore = calculateCreditScore({\n        annualIncome: parseFloat(loanData.annualIncome || \"0\"),\n        currentDebt: parseFloat(loanData.currentDebt || \"0\"),\n        employmentYears: loanData.employmentYears || 0,\n        creditHistory: loanData.creditHistory || 0,\n        previousLoans: loanData.previousLoans || 0,\n        homeOwnership: loanData.homeOwnership || \"rent\",\n        bankAccount: loanData.bankAccount || true,\n      });\n\n      const interestRate = calculateInterestRate(creditScore);\n      const monthlyPayment = calculateMonthlyPayment(\n        parseFloat(loanData.amount),\n        interestRate,\n        loanData.duration || 12\n      );\n\n      // Determine credit grade\n      let creditGrade: \"A\" | \"B\" | \"C\" | \"D\" | \"E\" = \"E\";\n      if (creditScore >= 750) creditGrade = \"A\";\n      else if (creditScore >= 650) creditGrade = \"B\";\n      else if (creditScore >= 550) creditGrade = \"C\";\n      else if (creditScore >= 450) creditGrade = \"D\";\n\n      const loan = await storage.createLoan({\n        ...loanData,\n        creditScore,\n        creditGrade,\n        interestRate: interestRate.toFixed(2),\n        monthlyPayment: monthlyPayment.toFixed(2),\n        status: \"approved\", // Auto-approve for demo\n      });\n\n      res.json(loan);\n    } catch (error) {\n      console.error(\"Error creating loan:\", error);\n      res.status(500).json({ message: \"Failed to create loan\" });\n    }\n  });\n\n  app.get(\"/api/loans/my\", async (req: any, res) => {\n    try {\n      if (!req.session?.userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      \n      const loans = await storage.getUserLoans(req.session.userId);\n      res.json(loans);\n    } catch (error) {\n      console.error(\"Error fetching user loans:\", error);\n      res.status(500).json({ message: \"Failed to fetch loans\" });\n    }\n  });\n\n  app.get(\"/api/loans/marketplace\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n      const loans = await storage.getAvailableLoans(limit);\n      res.json(loans);\n    } catch (error) {\n      console.error(\"Error fetching marketplace loans:\", error);\n      res.status(500).json({ message: \"Failed to fetch marketplace loans\" });\n    }\n  });\n\n  app.get(\"/api/loans/:id\", async (req, res) => {\n    try {\n      const loan = await storage.getLoan(req.params.id);\n      if (!loan) {\n        return res.status(404).json({ message: \"Loan not found\" });\n      }\n      res.json(loan);\n    } catch (error) {\n      console.error(\"Error fetching loan:\", error);\n      res.status(500).json({ message: \"Failed to fetch loan\" });\n    }\n  });\n\n  app.patch(\"/api/loans/:id\", async (req, res) => {\n    try {\n      const loan = await storage.updateLoan(req.params.id, req.body);\n      res.json(loan);\n    } catch (error) {\n      console.error(\"Error updating loan:\", error);\n      res.status(500).json({ message: \"Failed to update loan\" });\n    }\n  });\n\n  app.delete(\"/api/loans/:id\", async (req, res) => {\n    try {\n      const loanId = req.params.id;\n      \n      // Check if loan exists\n      const loan = await storage.getLoan(loanId);\n      if (!loan) {\n        return res.status(404).json({ message: \"Loan not found\" });\n      }\n      \n      // In demo mode, allow deletion\n      await storage.deleteLoan(loanId);\n      res.json({ message: \"Loan deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting loan:\", error);\n      res.status(500).json({ message: \"Failed to delete loan\" });\n    }\n  });\n\n  // Investment routes (no auth required)\n  app.post(\"/api/investments\", async (req, res) => {\n    try {\n      if (!(req as any).session?.userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const investmentData = insertInvestmentSchema.parse({\n        ...req.body,\n        investorId: (req as any).session.userId,\n      });\n\n      // Get loan details to calculate expected return\n      const loan = await storage.getLoan(investmentData.loanId);\n      if (!loan) {\n        return res.status(404).json({ message: \"Loan not found\" });\n      }\n\n      // Check if loan is available for investment\n      if (loan.status !== \"approved\") {\n        return res.status(400).json({ message: \"Loan is not available for investment\" });\n      }\n\n      // Check funding limit\n      const requestedAmount = parseFloat(investmentData.amount);\n      const remainingAmount = parseFloat(loan.amount) - parseFloat(loan.totalFunded);\n      \n      if (requestedAmount > remainingAmount) {\n        return res.status(400).json({ \n          message: \"Investment amount exceeds remaining funding needed\",\n          remainingAmount: remainingAmount.toString()\n        });\n      }\n\n      const interestRate = parseFloat(loan.interestRate || \"0\");\n      const expectedReturn = (requestedAmount * (interestRate / 100) * (loan.duration || 12)) / 12;\n\n      const investment = await storage.createInvestment({\n        ...investmentData,\n        interestRate: loan.interestRate || \"0\",\n        expectedReturn: expectedReturn.toFixed(2),\n      });\n\n      res.json(investment);\n    } catch (error) {\n      console.error(\"Error creating investment:\", error);\n      res.status(500).json({ message: \"Failed to create investment\" });\n    }\n  });\n\n  app.get(\"/api/investments/my\", async (req: any, res) => {\n    try {\n      if (!req.session?.userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      \n      const investments = await storage.getUserInvestments(req.session.userId);\n      res.json(investments);\n    } catch (error) {\n      console.error(\"Error fetching user investments:\", error);\n      res.status(500).json({ message: \"Failed to fetch investments\" });\n    }\n  });\n\n  // Admin routes (demo mode - everyone is admin)\n  app.get(\"/api/admin/metrics\", async (req, res) => {\n    try {\n      const metrics = await storage.getAdminMetrics();\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error fetching admin metrics:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin metrics\" });\n    }\n  });\n\n  app.get(\"/api/admin/loans\", async (req, res) => {\n    try {\n      const loans = await storage.getAllLoans();\n      res.json(loans);\n    } catch (error) {\n      console.error(\"Error fetching admin loans:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin loans\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":9675}}}